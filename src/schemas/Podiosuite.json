{
  "info": {
    "title": "API v3.6",
    "version": "3.6.0"
  },
  "basePath": "/v3",
  "tags": [
    {
      "name": "auth"
    },
    {
      "name": "users"
    },
    {
      "name": "ping"
    },
    {
      "name": "bulk"
    }
  ],
  "swagger": "2.0",
  "paths": {
    "/auth/token": {
      "post": {
        "summary": "Login",
        "description": "Takes username and password and if it finds match in back-end it returns an object with the user data and token used to authorize the login.",
        "tags": [
          "auth"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "This operation takes username and password as parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing the session token and the user data.",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/auth/recover-password": {
      "post": {
        "summary": "Recover Password",
        "description": "Takes username or email as values and sends an email to the user with instructions to reset the password, including a tokenized URL that directs the user to the password reset form.",
        "tags": [
          "auth"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "description": "This operation takes a valid username or email parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a true and a message if is successfull.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true
                },
                "message": {
                  "type": "string",
                  "default": "We have send you an email with the instructions to reset your password, check your inbox."
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/auth/reset/{mailtoken}": {
      "post": {
        "summary": "Reset password",
        "description": "Takes token session sent in email and resets the password for the active user.",
        "tags": [
          "auth"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mailtoken",
            "required": true,
            "type": "string",
            "description": "A valid token recived via email."
          },
          {
            "in": "body",
            "name": "payload",
            "description": "A valid password.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a true and a message if success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true
                },
                "message": {
                  "type": "string",
                  "default": "Your password has been updated"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/auth/revoke-token": {
      "post": {
        "summary": "Revoke Token",
        "description": "Revokes the active session for the user by disabling the token. This disables the different sessions opened on differents computers and browsers.<br /> The user will login again to use the App, and a new token will be generate.",
        "tags": [
          "auth"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a true value and a message if successfull",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true
                },
                "message": {
                  "type": "string",
                  "default": "Your password has been updated"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Change password",
        "description": "Changes the user’s password and resets the session token.",
        "tags": [
          "auth"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "- accountId: string, parent account.\n- oldPassword: string, old password.\n- newPassword: string, new password. Must validate.\n- repeatnewPassword: string.\n",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "oldPassword",
                "newPassword",
                "repeatnewPassword"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "oldPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                },
                "repeatnewPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New token is returned if everything goes well.",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Create new user",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Creates a new user taking token and new user data. Returns the new user data. An email is sent to the new user with instructions to log in.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "- accountId: string, parent account id (can be got by using GET /accounts endpoint).\n- username: string, the new username.\n- password: string, the new password.\n- email: string, new email.\n- status: string, status of new user (active or inactive)\n- permissions: array: accountId from parent account and roles (admin, financial, ...), string array, permissions for new user.\n",
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "username",
                "password",
                "email",
                "permissions"
              ],
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "username": {
                  "type": "string",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "required": true
                },
                "email": {
                  "type": "string",
                  "required": true
                },
                "status": {
                  "type": "string"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "accountId": {
                        "type": "string"
                      },
                      "roles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "- Returns an object with the new user data.\n- Sends email to the new user email address with the instructions to log in.\n- string, “Success! New user created, email instructions sent.”\n",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "get": {
        "summary": "Get all users",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Takes token and account ID as mandatory parameters and returns an array of users. If nothing is found returns an empty array.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter by account.",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "query",
            "name": "username",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "type": "string"
          },
          {
            "in": "query",
            "name": "favorites",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended"
            ]
          },
          {
            "in": "query",
            "name": "created",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastAccess",
            "description": "Filter Accounts by lastAccess. To match an exact datetime use format YYYY-MM-DD HH:mm:SS. To match a range place two datetimes separated by comma. Range filtering support partial dates as YYYY, YYYY-MM, YYYY-MM:DD HH, etc.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "_id",
            "description": "Filter by User ID. Multiple comma-separated values are allowed but 400 items maximum.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the User attributes. Default is unsorted.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to ascendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of user, empty array if nothing is found.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/usersbulk": {
      "post": {
        "summary": "Get all users bulk",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Takes token, account ID and and bulk search parameters to returns a list of users belonging to a specific account.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter by account.",
            "required": true,
            "default": "*************************",
            "type": "string"
          },
          {
            "in": "query",
            "name": "username",
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "type": "string"
          },
          {
            "in": "query",
            "name": "favorites",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended"
            ]
          },
          {
            "in": "query",
            "name": "created",
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastAccess",
            "description": "Filter Accounts by lastAccess. To match an exact datetime use format YYYY-MM-DD HH:mm:SS. To match a range place two datetimes separated by comma. Range filtering support partial dates as YYYY, YYYY-MM, YYYY-MM:DD HH, etc.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "_id",
            "description": "Filter by User ID. Multiple comma-separated values are allowed but 400 items maximum.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the User attributes. Default is unsorted.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to ascendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of user, empty array if nothing is found.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get validated user data",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Takes token and returns user data.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter by account.",
            "required": true,
            "type": "string",
            "default": "*************************"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns your user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/me/accept-tc": {
      "post": {
        "summary": "User accept terms and conditions",
        "description": "User accept terms and conditions.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************",
            "schema": {
              "type": "object",
              "properties": {
                "tcVersion": {
                  "type": "string",
                  "required": false
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Empty response"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Gets a user by ID, using token, userID and accountID as parameters, and returns a JSON with the users data.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "description": "Active session token",
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "description": "user ID.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter by account.",
            "required": true,
            "type": "string",
            "default": "*************************"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an user.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "put": {
        "summary": "Modify user",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Modify a user using the parameters available.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "description": "Active session token",
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "description": "user ID.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "picture": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user modified.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Takes token and user ID, then removes user.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "User ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "x-access-token",
            "description": "Active session token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "- accountId: string, parent account.\n",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a success message.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/{userId}/change-password": {
      "put": {
        "summary": "Change user password",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Change a user password using the parameters available.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "description": "Active session token",
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "user ID.",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "description": "- accountId, string\n- password, string, must validate (new password)\n",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "password"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user modified.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/{userId}/favorites": {
      "put": {
        "summary": "Modify user favorite options",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Modify the user options for favorites using the parameters available.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The full model of favorites will be overwrited in the data base, use carefully.\n- assets, array, string\n- accounts, array, string\n- products, array, string\n- users, array, string\n- billings, array, string\n- summaries, array, string\n",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "assets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "accounts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "products": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "users": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "billings": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "summaries": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user modified.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/{userId}/customization": {
      "put": {
        "summary": "Modify user customization options",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Modify the user customization options. Modify the setup of the columns as displayed in tables in the user interface and the sort order.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The object customization support any json object, customize with your needs.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "customization": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user modified.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/users/{userId}/permissions": {
      "put": {
        "summary": "Add a Role to an user for one account",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Gell all users actions for an account.",
        "tags": [
          "users"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "default": "*************************"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "description": "An array of roles for an account is required.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "roles"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user modified.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/notifications": {
      "get": {
        "summary": "Get all notifications for an accounts",
        "description": "Get all notifications of an account.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryValue"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryRead"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryDate"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryNotificationsSort"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryNotificationsFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/notifications/{notificationId}": {
      "put": {
        "summary": "Check a notification as readed.",
        "description": "Set the notification which id has been given as readed.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathNotificationId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of notifications",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a notification",
        "description": "Delete a notification",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathNotificationId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "Get all accounts",
        "description": "Get all accounts and subaccounts.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryDefaultEmail"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryResellerId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryCreated"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryLastAccess"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccounts"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryCurrency"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryWhiteLabel"
          },
          {
            "$ref": "#/definitions/accountRouterParams/querySecurityServiceType"
          },
          {
            "$ref": "#/definitions/accountRouterParams/querySecurityCarrier"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryIpAddress"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountsSort"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountsFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new accounts",
        "description": "Create a new child account in the system.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "name",
                "resellerId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "defaultEmail": {
                  "type": "string"
                },
                "defaultSmsOrigin": {
                  "type": "string"
                },
                "currency": {
                  "type": "string",
                  "enum": [
                    "USD",
                    "EUR",
                    "GBP",
                    "MXN",
                    "HKD",
                    "CNY",
                    "MYR",
                    "AUD"
                  ]
                },
                "resellerId": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "minSubDataLimit": {
                  "type": "number"
                },
                "minSubSMSLimit": {
                  "type": "number"
                },
                "branding": {
                  "type": "object",
                  "properties": {
                    "supportEmail": {
                      "type": "string"
                    },
                    "supportPageMessage": {
                      "type": "string"
                    },
                    "theme": {
                      "type": "string"
                    },
                    "logoURL": {
                      "type": "string"
                    },
                    "brandName": {
                      "type": "string"
                    },
                    "domainURL": {
                      "type": "string"
                    },
                    "emailDomain": {
                      "type": "string"
                    },
                    "showBranding": {
                      "type": "boolean"
                    }
                  }
                },
                "addresses": {
                  "type": "array",
                  "items": {
                    "schema": {
                      "$ref": "#/definitions/AccountAddresses"
                    }
                  }
                },
                "billing": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "prepay",
                        "postpay"
                      ]
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the account created.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accountsbulk": {
      "post": {
        "summary": "Get all accounts",
        "description": "Get all accounts and subaccounts.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryDefaultEmail"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryResellerId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryCreated"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryLastAccess"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccounts"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryCurrency"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryWhiteLabel"
          },
          {
            "$ref": "#/definitions/accountRouterParams/querySecurityServiceType"
          },
          {
            "$ref": "#/definitions/accountRouterParams/querySecurityCarrier"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryIpAddress"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountsSort"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountsFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "summary": "Get one account",
        "description": "Retrieve one account matching the id provided.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns one account",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "put": {
        "summary": "Modify an existing account.",
        "description": "Modify an existing account with the new data setted into the parameters.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "defaultEmail": {
                  "type": "string"
                },
                "defaultSmsOrigin": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "active",
                    "inactive",
                    "suspended"
                  ]
                },
                "timezone": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "reseller",
                    "customer"
                  ]
                },
                "name": {
                  "type": "string"
                },
                "legalName": {
                  "type": "string"
                },
                "addresses": {
                  "type": "array",
                  "items": [
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the account modified.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing account.",
        "description": "Remove an existing account from the database.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "Main accountId",
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing a boolean if everything goes well.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/branding": {
      "put": {
        "summary": "Modify an existing account.",
        "description": "Modify the branding information of an account.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "in": "body",
            "name": "account",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "branding": {
                  "type": "object",
                  "properties": {
                    "logoLarge": {
                      "type": "string"
                    },
                    "logoSmall": {
                      "type": "string"
                    },
                    "logoLogin": {
                      "type": "string"
                    },
                    "favicon": {
                      "type": "string"
                    },
                    "theme": {
                      "type": "string"
                    },
                    "supportEmail": {
                      "type": "string"
                    },
                    "phoneSupport": {
                      "type": "string"
                    },
                    "supportPageMessage": {
                      "type": "string"
                    },
                    "loginPageMessage": {
                      "type": "string"
                    },
                    "domainURL": {
                      "type": "string"
                    },
                    "emailDomain": {
                      "type": "string"
                    },
                    "showBranding": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the account modified.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/branding/verify": {
      "get": {
        "summary": "Get Account Branding status.",
        "description": "Get Account Branding status.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the account modified.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/roles": {
      "get": {
        "summary": "Get all roles for an accounts",
        "description": "Retrieve all existing roles.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of roles.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/roles/{rolename}/actions": {
      "get": {
        "summary": "Get all actions of a roles for an accounts",
        "description": "Get all actions belonging a role.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathRolename"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of actions.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/notifications": {
      "get": {
        "summary": "Get all notifications for an accounts",
        "description": "Get all notifications of an account.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of notifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/notifications/{notificationId}": {
      "put": {
        "summary": "Set a notification as readed.",
        "description": "The notification with the id provided will be check as readed.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathNotificationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the notication modified.",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a notification",
        "description": "Delete a notification",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathNotificationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns notification deleted",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/products": {
      "get": {
        "summary": "Retrive all related products",
        "description": "Retrive all related products",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "default": "active",
            "enum": [
              "all",
              "active"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Array of products, empty array if nothing is found..",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/products/alerts": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "summary": "Alerts",
        "description": "- A maximum of 3 alerts per SIM can be set in order to notify the user when the consumption of a  promotion  reaches or exceeds a certain limit, Alerts can also be used to notify the user of usage over their predefined bundle amount.\n\n- Use `in_cost` alert to notify when the SIMs in bundle cost has reached the limit. Use `out_cost` alert to notify when the SIMs out of bundle costs (overuse) has reached the limit. Use `in_percent` alert to notify when the promotion / bundle depletion has reached certain percent set by the limit. Use `out_percent` alert to notify when the promotion / bundle overuse has reached certain percent set by the limit.\n\n- Use `desktop` to put a notification on the web platforms only. Use `email_default` to send a notification to the default email set on the web platforms, or `email_alternative` to send to the additional alternative email set on the web platforms. A desktop will always show even when email notification is set onlY.\n",
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The collection of alerts. A max. of 3 alerts per SIM is allowed.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "productId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "productId": {
                  "type": "string"
                },
                "alternativeEmail": {
                  "type": "string"
                },
                "alerts": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "in_cost",
                          "in_percent",
                          "out_cost",
                          "out_percent"
                        ],
                        "description": "Alert type."
                      },
                      "notification": {
                        "type": "string",
                        "enum": [
                          "desktop",
                          "email_default",
                          "email_alternative"
                        ],
                        "description": "Notification type."
                      },
                      "limit": {
                        "type": "number",
                        "description": "Limit value."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "accounts"
        ],
        "responses": {
          "200": {
            "description": "Alerts configuration after operation",
            "schema": {
              "$ref": "#/definitions/AssetSimcardAlert"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/topup-direct": {
      "put": {
        "summary": "Top Up Account",
        "description": "Amount in which the balance increases.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Amount in which the balance increases.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "increase"
              ],
              "properties": {
                "increase": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an account.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/security-settings": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "summary": "Post Security Service Setting",
        "description": "Add a Security Service Setting inside an account",
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "Security Setting to add",
            "schema": {
              "$ref": "#/definitions/AccountSecuritySetting"
            }
          }
        ],
        "tags": [
          "accounts"
        ],
        "responses": {
          "200": {
            "description": "Returns edited account.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/security-settings/{securitySettingId}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "summary": "Edit Security Service Setting",
        "description": "Edit a Security Service Setting inside an account",
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathSecuritySettingId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "New values por security setting",
            "schema": {
              "$ref": "#/definitions/AccountSecuritySetting"
            }
          }
        ],
        "tags": [
          "accounts"
        ],
        "responses": {
          "200": {
            "description": "Returns edited account.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Edit Security Service Setting",
        "description": "Edit a Security Service Setting inside an account",
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathAccountId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/pathSecuritySettingId"
          },
          {
            "$ref": "#/definitions/accountRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns edited account.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/security-settings/available-gaps": {
      "get": {
        "summary": "Get all accounts",
        "description": "Retrieve one account matching the id provided.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "in": "path",
            "name": "accountId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "accountId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "carrier",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "cidrBlockSize",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns available GAPs",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "apn": {
                    "type": "string"
                  },
                  "cidrBlocks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/accounts/{accountId}/security-settings/available-ips": {
      "get": {
        "summary": "Get all available ips",
        "description": "Retrieve available ips for particular pool.",
        "tags": [
          "accounts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/accountRouterParams/headerToken"
          },
          {
            "in": "path",
            "name": "accountId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "accountId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "poolId",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns available IPs",
            "schema": {
              "type": "object",
              "properties": {
                "availableIPs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cidrBlocks": {
                        "type": "string"
                      },
                      "iPsCount": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "App Status",
        "description": "Endpoint to asure the App is up and working. If is not, nginx will return a 502 Bad Gateway exception.",
        "tags": [
          "ping"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "default": true
                },
                "message": {
                  "type": "string",
                  "default": "Pong v2.1.0."
                }
              }
            }
          },
          "502": {
            "description": "BAD GATEWAY"
          }
        }
      }
    },
    "/mail": {
      "post": {
        "summary": "Mail",
        "description": "General endpoint to send an email to an account",
        "tags": [
          "utils"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "subject",
                "body"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "sendcopy": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "string"
                },
                "to": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "html": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/upload": {
      "post": {
        "summary": "Upload a file to some resource",
        "description": "General endpoint to send files",
        "tags": [
          "utils"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "accountId",
            "type": "string",
            "description": "accountId"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file",
            "required": true,
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "contentType": {
                  "type": "string"
                },
                "length": {
                  "type": "number"
                },
                "chunkSize": {
                  "type": "number"
                },
                "uploadDate": {
                  "type": "string",
                  "format": "dateTime"
                },
                "md5": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/file/{fileId}": {
      "get": {
        "summary": "Return a file to some resource",
        "description": "General endpoint to send files",
        "tags": [
          "utils"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fileId",
            "type": "string",
            "description": "The file to get"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": "array",
            "items": [
            ]
          }
        }
      }
    },
    "/logincustomization": {
      "get": {
        "summary": "Return the branding of a customURL",
        "description": "Return the branding of a customURL",
        "tags": [
          "utils"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "customURL",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "properties": {
                "loginPageMessage": {
                  "type": "string"
                },
                "logoLogin": {
                  "type": "string"
                },
                "theme": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulatecdr": {
      "post": {
        "summary": "Simulate CDR",
        "description": "Create a Fake CDR",
        "tags": [
          "utils"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "iccid",
                "starttime",
                "endtime",
                "bytes",
                "mcc",
                "mnc",
                "profilemcc",
                "profilemnc"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "iccid": {
                  "type": "string"
                },
                "starttime": {
                  "type": "string"
                },
                "endtime": {
                  "type": "string"
                },
                "bytes": {
                  "type": "string"
                },
                "mcc": {
                  "type": "string"
                },
                "mnc": {
                  "type": "string"
                },
                "profilemcc": {
                  "type": "string"
                },
                "profilemnc": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": null,
            "schema": {
              "type": "object",
              "properties": {
                "callId": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "summary": "Webhook Notification",
        "description": "General endpoint to send a webhook notification",
        "tags": [
          "utils"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "simAppsInfo"
                  ],
                  "required": true
                },
                "data": {
                  "type": "object",
                  "required": true,
                  "description": "payload"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "accepted"
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Get products of an account and accounts below",
        "description": "Retrieves the information stored about Products for an account and below.",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID is mandatory in order to know which account are you operating from",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "iccid",
            "description": "Shows only the products available for an iccid",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name to filter",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ownerAccountId",
            "description": "Account Owner ID is used for filter products by customer, can differ from your accountId in order to filter by yourself or a child account directly",
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountTransferId",
            "description": "Account Transfer ID mandatory to filter them by customers.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "isTransferred",
            "description": "If the Account Transfer ID exists",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "carriers",
            "description": "filter by carriers, divide by comma. By default returns any carrier of the list. If imsisType is 'multiimsis' return only assets with all these carriers",
            "type": "string"
          },
          {
            "in": "query",
            "name": "imsisType",
            "description": "Imsi Type to filter, separated by comma",
            "type": "string",
            "enum": [
              "singleimsis",
              "multiimsis"
            ]
          },
          {
            "in": "query",
            "name": "type",
            "description": "The Product Type",
            "required": false,
            "type": "string",
            "enum": [
              "PerMb",
              "Aggregate",
              "Single",
              "SharedDataPool",
              "DataPool"
            ]
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Currency of the product.",
            "required": false,
            "type": "string",
            "enum": [
              "USD",
              "EUR",
              "GBP",
              "MXN",
              "HKD",
              "CNY",
              "MYR",
              "AUD"
            ]
          },
          {
            "in": "query",
            "name": "cycle",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "cycleUnits",
            "description": "Units used for the cycle",
            "required": false,
            "type": "string",
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ]
          },
          {
            "in": "query",
            "name": "contractLength",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "renewOnExpiry",
            "description": null,
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "renewOnDepletion",
            "description": null,
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "_id",
            "description": "Filter by Product ID. Multiple comma-separated values are allowed but 400 items maximum.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the Account attributes. Default is unsorted.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to ascendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string",
            "enum": [
              "json",
              "csv"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Array of products, empty array if nothing is found..",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      },
      "post": {
        "summary": "Create a product",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Creates a new product taking a token, an accountId and the new product data. Returns the new product data.",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "name"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "- Returns the created product\n",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "summary": "Get a product of an account",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "productId",
            "required": true
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Return created product.",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      },
      "patch": {
        "summary": "Updates a product",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Updates a product taking a token, an accountId and the updated product data. Returns the updated product data.",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductNoBundleId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "- Returns the patched product\n",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete product by ID",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "productId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a success message.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/schema/product": {
      "get": {
        "summary": "Get schema for product creation",
        "security": [
          {
            "token": [
            ]
          },
          {
            "accountId": [
            ]
          }
        ],
        "description": "Get all the availables schemas for creating a product.",
        "tags": [
          "schema"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string",
            "default": "*************************"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter by account.",
            "required": true,
            "type": "string",
            "default": "*************************"
          }
        ],
        "responses": {
          "200": {
            "description": "- Returns an product Schema\n"
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/products/{productId}/transfer": {
      "post": {
        "summary": "Transfer products from an account to another",
        "tags": [
          "products"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "productId",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "originAccountId",
                "destinyAccountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "originAccountId": {
                  "type": "string"
                },
                "destinyAccountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return created product.",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid Parameters.",
            "schema": "array"
          },
          "401": {
            "description": "Authentication error.",
            "schema": "array"
          },
          "403": {
            "description": "Not Authorized",
            "schema": "array"
          },
          "500": {
            "description": "Internal Application Error.",
            "schema": "array"
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": "array"
          }
        }
      }
    },
    "/cdr": {
      "get": {
        "summary": "Get cdrs",
        "description": "Get cdrs on application. If param type is not set to sms, always returns data cdrs",
        "tags": [
          "cdrs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "iccid",
            "description": "Filter SIM cards by ICCID. Multiple comma-separated values are allowed.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter SIM cards by type. <br> - If param iccid is not set and param type is not set or set to `data`, it filters only type data cdrs. If param type is set to `sms` only filters type sms cdrs. <br> - If param iccid is set and param type is not set or set to `data`, it returns data cdrs of that iccid. If param type is set to `sms`, it returns sms cdrs for that iccid..",
            "required": false,
            "type": "string",
            "enum": [
              "data",
              "sms"
            ]
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "(Only for type = data cdr's)To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "endTime",
            "description": "To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "billTime",
            "description": "(date when it was rated in the system) To match an exact datetime  use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "(Only for type = sms).Number from where a SMS is sended.",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "description": "(Only for type = sms).Number where a SMS is sended.",
            "required": false
          },
          {
            "in": "query",
            "name": "location",
            "description": "Filter by last connection `mcc-mnc`. Multiple comma-separated values are allowed.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the Account attributes. Default is unsorted.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to ascendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "enum": [
              "json",
              "csv"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "CDR info Info.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "servingNetwork": {
                      "type": "object",
                      "properties": {
                        "mcc": {
                          "type": "string"
                        },
                        "mnc": {
                          "type": "string"
                        }
                      }
                    },
                    "startTime": {
                      "type": "string",
                      "description": "Only for Data cdr's",
                      "format": "dateTime"
                    },
                    "endTime": {
                      "type": "string",
                      "format": "dateTime"
                    },
                    "billTime": {
                      "type": "string",
                      "format": "dateTime"
                    },
                    "ipAddress": {
                      "type": "string",
                      "description": "Only for Data cdr's"
                    },
                    "bytes": {
                      "type": "number",
                      "description": "Only for Data cdr's"
                    },
                    "roundedBytes": {
                      "type": "number",
                      "description": "Only for Data cdr's"
                    },
                    "originatingAddress": {
                      "type": "string",
                      "description": "Only for sms cdr's"
                    },
                    "destinationAddress": {
                      "type": "string",
                      "description": "Only for sms cdr's"
                    }
                  }
                },
                "_id": {
                  "type": "string"
                },
                "iccid": {
                  "type": "string"
                },
                "msisdn": {
                  "type": "string"
                },
                "imei": {
                  "type": "string"
                },
                "accountId": {
                  "type": "string"
                },
                "bundleId": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "ratings": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "type": "object",
                      "properties": {
                        "remainingCredit": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "number"
                            },
                            "currency": {
                              "type": "string"
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "remainingBytes": {
                          "type": "number",
                          "description": "Only for Data cdr's"
                        },
                        "remainingSms": {
                          "type": "number",
                          "description": "Only for sms cdr's"
                        }
                      }
                    },
                    "_id": {
                      "type": "string"
                    },
                    "dataUsed": {
                      "type": "number",
                      "description": "Only for Data cdr's"
                    },
                    "cost": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currency": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "created": {
                  "type": "string",
                  "format": "dateTime"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/cdr/stats": {
      "get": {
        "summary": "Get CDRs stats",
        "description": "Get all cdrs on application. If type is not set to `sms` it returns data cdrs.",
        "tags": [
          "cdrs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "iccid",
            "description": "Filter SIM cards by ICCID. Multiple comma-separated values are allowed.",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter SIM cards by type. <br> - If param iccid is not set and param type is not set or set to `data`, it filters only type data cdrs. If param type is set to `sms` only filters type sms cdrs. <br> - If param iccid is set and param type is not set or set to `data`, it returns data cdrs of that iccid. If param type is set to `sms`, it returns sms cdrs for that iccid..",
            "required": false,
            "type": "string",
            "enum": [
              "data",
              "sms"
            ]
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "(Only for type = `data`)To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "endTime",
            "description": "To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "billTime",
            "description": "(date when it was rated in the system) To match an exact datetime  use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
            "required": false
          },
          {
            "in": "query",
            "name": "location",
            "description": "Filter by last connection `mcc-mnc`. Multiple comma-separated values are allowed.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "CDR info Info.",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "cdrs": {
                  "type": "number"
                },
                "bytes": {
                  "description": "only for data CDRS",
                  "type": "number"
                },
                "smsNumber": {
                  "description": "only for sms CDRs",
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "summary": "Assets card Info (bulk)",
        "description": "Assets card Info (bulk)",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryValue"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySmartFilter"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProduct"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryInOveruse"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryCarriers"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryImsisType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetSimcard"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Asset",
        "description": "Create a new Asset",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The accountId makes reference to the account of the person that is creating the Asset. Optionally you can indicate the name of the asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "iccid",
                "carriers"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "iccid": {
                  "type": "string"
                },
                "carriers": {
                  "type": "object"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "SIM",
                    "eSIM Profile"
                  ],
                  "default": "SIM"
                },
                "model": {
                  "type": "string"
                },
                "profileState": {
                  "type": "string",
                  "enum": [
                    "",
                    "onstock",
                    "disabled",
                    "enabled"
                  ],
                  "default": ""
                },
                "bootstrapEid": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assetsbulk": {
      "post": {
        "summary": "Assets card Info (bulk)",
        "description": "Assets card Info (bulk)",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryValue"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySmartFilter"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryGroupName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProduct"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryInOveruse"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryCarriers"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryImsisType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryFormat"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Filter SIM cards by ICCID, MSISDN, Name or Account name. Multiple comma-separated values are allowed.",
            "schema": {
              "type": "object",
              "properties": {
                "iccid": {
                  "type": "string"
                },
                "msisdn": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "accountName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetSimcard"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}": {
      "get": {
        "summary": "Assets get Info",
        "description": "Assets get Info",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "put": {
        "summary": "Change the name of the asset for the specified accountId",
        "description": "Change the name of the asset for the specified accountId",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "name"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove an Asset",
        "description": "Remove an Asset",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/groupname": {
      "put": {
        "summary": "Update group name",
        "description": "Update group name",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "groupname": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/transfer": {
      "post": {
        "summary": "Transfer an Asset from an account to another",
        "description": "Transfer an Asset from an account to another",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "originAccountId",
                "destinyAccountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "originAccountId": {
                  "type": "string"
                },
                "destinyAccountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/subscribe": {
      "put": {
        "summary": "Activate an asset and subscribe the asset to the assigned product.",
        "description": "Activate an asset and subscribe the asset to the assigned product.",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.<br /> <br /> <b>ipPools</b>, When subscribing multi-imsi sims please note you will need to specify the poolid for each of the imsi providers. <br /> If one of the ippools is not specified in your call we will assign a dynamic IP for that IMSI by default.",
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "subscription": {
                  "type": "object",
                  "properties": {
                    "subscriberAccountId": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date"
                    },
                    "ipPools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "carrier": {
                            "type": "string"
                          },
                          "poolId": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/unsubscribe": {
      "put": {
        "summary": "Unsubscribe the asset to the assigned product",
        "description": "Unsubscribe the asset to the assigned product",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "subscriptionId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "subscriptionId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/resubscribe": {
      "put": {
        "summary": "Remove subscription and create a new subscribe the asset to the assigned product.",
        "description": "Remove subscription and create a new subscribe the asset to the assigned product.",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.",
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "subscription": {
                  "type": "object",
                  "properties": {
                    "subscriberAccountId": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/suspend": {
      "put": {
        "summary": "Suspend an assets",
        "description": "Suspend an assets",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Account ID mandatory to filter them by customers.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/unsuspend": {
      "put": {
        "summary": "Reactive an assets",
        "description": "Reactive an assets. The assets should be suspended",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "Account ID mandatory to filter them by customers.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/alerts": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "summary": "Alerts",
        "description": "- You can set data alerts (alerts array) and sms alerts (smsAlerts array). You can set both or one of them.\n\n- Use `in_cost` alert to notify when the SIMs in bundle cost has reached the limit. Use `out_cost` alert to notify when the SIMs out of bundle costs (overuse) has reached the limit. Use `in_percent` alert to notify when the promotion / bundle depletion has reached certain percent set by the limit. Use `out_percent` alert to notify when the promotion / bundle overuse has reached certain percent set by the limit.\n\n- Use `desktop` to put a notification on the web platforms only. Use `email_default` to send a notification to the default email set on the web platforms, or `email_alternative` to send to the additional alternative email set on the web platforms. A desktop will always show even when email notification is set onlY.\n",
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The collection of alerts. A max. of 3 alerts per SIM is allowed.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "alternativeEmail": {
                  "type": "string"
                },
                "alerts": {
                  "$ref": "#/definitions/assetAlerts/dataAlerts"
                },
                "smsAlerts": {
                  "$ref": "#/definitions/assetAlerts/smsAlerts"
                },
                "statusAlerts": {
                  "$ref": "#/definitions/assetAlerts/statusAlerts"
                }
              }
            }
          }
        ],
        "tags": [
          "assets"
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/purge": {
      "post": {
        "summary": "Purge from Network.",
        "description": "Forces an update location on the SIM. Useful to remotely reset the network connection on a SIM (refresh connection).",
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "confirm"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "confirm": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "assets"
        ],
        "responses": {
          "200": {
            "description": "Purge operation sent.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/sms": {
      "post": {
        "summary": "Send SMS.",
        "description": "Sends a message to the SIM limited to 160 characters. A single SMS can hold up to 160 characters using \"Stardard\" coding, some special characters are allowed but they consume double space. Using characters out of the standard set requires UCS-2 coding and the message size is limited to 70 characters.<br><br>Use data coding scheme 240 for a Flash SMS, and 0 for a Standard SMS. A Flash SMS is displayed on the screen immediately upon arrival but is not saved or stored on the device. A Standard SMS is displayed and saved to the device",
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "description": "dcs by default 240, optional 0 for Standar SMS.",
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "message"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "dcs": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "assets"
        ],
        "responses": {
          "200": {
            "description": "send sms to the destiny iccid.",
            "schema": {
              "type": "object",
              "properties": {
                "iccid": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/limit": {
      "post": {
        "summary": "Set limits.",
        "description": "Set limits for a simcard. You can set the limit for data (limit or datalimit) or sms (smslimit). Is mandatory to set one of them at least, but you can set both.<br>Datalimit must be set on bytes.",
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "datalimit": {
                  "type": "string"
                },
                "smslimit": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "assets"
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/tags": {
      "post": {
        "summary": "Set tags.",
        "description": "Set tags for a simcard. Each tag have an index  related with the order of the custom field.,  You need to add in each query as many values as tags have the simcard.   Example if you create three custom Fields  in this order  CF1, CF2 and CF3, you will need to add in the body 3 sections with the values that you need\n```\n\"tags\":[\n  {\"key\":\"1\",\"value\":\"\"},\n  {\"key\":\"2\",\"value\":\"\"},\n  {\"key\":\"3\",\"value\":\"\"}\n]\n```\nIf you want to change a value for only one of them you still need to add the rest of the values\n```\n\"tags\":[\n  {\"key\":\"1\",\"value\":\"Value1\"},\n  {\"key\":\"2\",\"value\":\"NEWVALUE\"},\n  {\"key\":\"3\",\"value\":\"Value3\"}\n]\n```\n",
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "name": "iccid",
            "in": "path",
            "description": "ICCID number.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "value": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "value": "string",
                        "default": "1"
                      },
                      "value": {
                        "type": "string",
                        "value": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "assets"
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/diagnostic": {
      "get": {
        "summary": "Get simcard information.",
        "description": "Checks the simcard status over the network, if the sim is correctly provisioned in the system, last connection, last data transmision, if it is online etc...",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info plus the network state.",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "notice": {
                  "type": [
                    "string"
                  ]
                },
                "provisioning": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "iccid": {
                      "type": "string"
                    },
                    "ownerAccountId": {
                      "type": "string"
                    },
                    "ownerAccountName": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "bundles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "dfProducts": {
                                  "type": "object",
                                  "properties": {
                                    "DataPoolProduct": {
                                      "type": "string"
                                    },
                                    "PerMbProduct": {
                                      "type": "string"
                                    },
                                    "SharedDataPoolProduct": {
                                      "type": "string"
                                    },
                                    "PerSMSProduct": {
                                      "type": "string"
                                    },
                                    "SMSPoolProduct": {
                                      "type": "string"
                                    },
                                    "PerSecondProduct": {
                                      "type": "string"
                                    },
                                    "VoicePoolProduct": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "bundleId": {
                                  "type": "string"
                                },
                                "localProductId": {
                                  "type": "string"
                                },
                                "localProductName": {
                                  "type": "string"
                                },
                                "initialSize": {
                                  "type": "number"
                                },
                                "remainingBytes": {
                                  "type": "number"
                                },
                                "dataUsed": {
                                  "type": "number"
                                },
                                "startTime": {
                                  "type": "string"
                                },
                                "endTime": {
                                  "type": "string"
                                },
                                "cost": {
                                  "type": "number"
                                },
                                "remainingCredit": {
                                  "type": "number"
                                },
                                "creditUsed": {
                                  "type": "number"
                                },
                                "perMbCost": {
                                  "type": "number"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "accoundtId": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "limit": {
                            "type": "number"
                          }
                        }
                      }
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "lastCall": {
                      "type": "object",
                      "properties": {
                        "servingNetwork": {
                          "type": "object",
                          "properties": {
                            "mcc": {
                              "type": "string"
                            },
                            "mnc": {
                              "type": "string"
                            }
                          }
                        },
                        "startTime": {
                          "type": "string"
                        },
                        "endTime": {
                          "type": "string"
                        },
                        "ipAddress": {
                          "type": "string"
                        },
                        "imei": {
                          "type": "string"
                        },
                        "bytes": {
                          "type": "number"
                        },
                        "roundedBytes": {
                          "type": "number"
                        }
                      }
                    },
                    "setups": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "alerts": {
                            "type": "array",
                            "items": {
                              "todo": {
                                "item": "string"
                              }
                            }
                          },
                          "accountId": {
                            "type": "string"
                          },
                          "assetName": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "ownership": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "network": {
                  "type": "object",
                  "properties": {
                    "services": {
                      "type": "object",
                      "properties": {
                        "smsMO": {
                          "type": "boolean"
                        },
                        "smsMT": {
                          "type": "boolean"
                        },
                        "voiceMO": {
                          "type": "boolean"
                        },
                        "voiceMT": {
                          "type": "boolean"
                        }
                      }
                    },
                    "lastRegistration": {
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "type": "string"
                        },
                        "mcc": {
                          "type": "string"
                        },
                        "mnc": {
                          "type": "string"
                        },
                        "lac": {
                          "type": "string"
                        },
                        "cellId": {
                          "type": "string"
                        }
                      }
                    },
                    "imsi": {
                      "type": "string"
                    },
                    "msisdn": {
                      "type": "string"
                    },
                    "fixedIP": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "apn": {
                      "type": "string"
                    },
                    "ip": {
                      "type": "string"
                    },
                    "imei": {
                      "type": "string"
                    },
                    "lastRegistration": {
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "type": "string"
                        }
                      }
                    },
                    "liveDataSession": {
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "provider": {
                          "type": "string"
                        }
                      }
                    },
                    "lastActiveSession": {
                      "type": "object",
                      "properties": {
                        "startTime": {
                          "type": "string"
                        },
                        "endTime": {
                          "type": "string"
                        },
                        "outcome": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "appsCompatibility": {
                  "type": "object",
                  "properties": {
                    "eSIMeUICC": {
                      "type": "string"
                    },
                    "multiIMSI": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error.",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          },
          "500": {
            "description": "Internal Application Error.",
            "schema": {
              "$ref": "#/definitions/applicationError"
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          }
        }
      }
    },
    "/assets/{iccid}/location": {
      "get": {
        "summary": "Return assets location.",
        "description": "Return assets location.",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Data of the location of the sims. If outcode is equal to mcc, the resolution will have the mcc",
            "schema": {
              "type": "object",
              "properties": {
                "outcode": {
                  "type": "string"
                },
                "location": {
                  "type": "object",
                  "properties": {
                    "lat": {
                      "type": "number"
                    },
                    "lng": {
                      "type": "number"
                    }
                  }
                },
                "resolution": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "404": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/sessions": {
      "get": {
        "summary": "Return asset sessions.",
        "description": "Return asset sessions.",
        "tags": [
          "assets"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a sessions active object",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "iccid": {
                  "type": "string"
                },
                "msisdn": {
                  "type": "string"
                },
                "imsi": {
                  "type": "string"
                },
                "imei": {
                  "type": "string"
                },
                "ipAddress": {
                  "type": "string"
                },
                "SGSNAddress": {
                  "type": "string"
                },
                "GGSNAddress": {
                  "type": "string"
                },
                "RATType": {
                  "type": "number"
                },
                "userLocationInfo": {
                  "type": "string"
                },
                "servingNetworkMcc": {
                  "type": "number"
                },
                "servingNetworkMnc": {
                  "type": "number"
                },
                "homeNetworkMcc": {
                  "type": "number"
                },
                "homeNetworkMnc": {
                  "type": "number"
                },
                "startTime": {
                  "type": "string"
                },
                "quota": {
                  "type": "number"
                },
                "usage": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "timestamp": {
                        "type": "string"
                      },
                      "bytes": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "404": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/reallocate-ip": {
      "post": {
        "summary": "Reassign a new IP",
        "description": "Reassign a new IP to a single asset or a bulk of assets. You can choose to update the IP and assign a new Fixed IP from a security service or a dynamic IP.",
        "tags": [
          "assets"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "<b>ipPools</b>, Include in this array an item for each carrier where you want to reassign the IP. <br/> If one of the providers (carrier) is not in the array, the current IP will be kept. If an entry has poolId as null, (meaning there is no destined IP range or a security service for it ) we will assign a dynamic IP for that IMSI.",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "ipPools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "carrier": {
                        "type": "string"
                      },
                      "poolId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          }
        }
      }
    },
    "/reports/custom": {
      "get": {
        "summary": "Get all reports",
        "description": "Get all reports from an account",
        "tags": [
          "reports"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/customReportParam/headerToken"
          },
          {
            "$ref": "#/definitions/customReportParam/queryAccountId"
          },
          {
            "$ref": "#/definitions/customReportParam/queryLimit"
          },
          {
            "$ref": "#/definitions/customReportParam/queryPage"
          },
          {
            "$ref": "#/definitions/customReportParam/queryName"
          },
          {
            "$ref": "#/definitions/customReportParam/queryOrder"
          },
          {
            "$ref": "#/definitions/customReportParam/querySort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reports filtered by the user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomReportNodata"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new custom report",
        "description": "Create a new custom report. </br> Date filtering supports dates as `YYYY-MM-DDTHH:mm:SSZ`, for example `\"2020-04-01T00:59:59Z\"` </br> The fileds requires are; accountId, dateFrom, dateTo",
        "tags": [
          "reports"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/customReportParam/headerToken"
          },
          {
            "in": "body",
            "name": "report",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilterCustom",
              "required": [
                "accountId",
                "dateFrom",
                "dateTo",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Forbidden"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Detele all reports",
        "description": "Delete all reports from an account",
        "tags": [
          "reports"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/customReportParam/headerToken"
          },
          {
            "$ref": "#/definitions/customReportParam/queryAccountId"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/reports/custom/{reportId}": {
      "get": {
        "summary": "Get one report",
        "description": "Get one reports from an account",
        "tags": [
          "reports"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/customReportParam/headerToken"
          },
          {
            "$ref": "#/definitions/customReportParam/queryAccountId"
          },
          {
            "$ref": "#/definitions/customReportParam/pathReport"
          }
        ],
        "responses": {
          "200": {
            "description": "A report with all the information related",
            "schema": {
              "$ref": "#/definitions/CustomReportData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete one report",
        "description": "Delete one report from an account",
        "tags": [
          "reports"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/customReportParam/headerToken"
          },
          {
            "$ref": "#/definitions/customReportParam/queryAccountId"
          },
          {
            "$ref": "#/definitions/customReportParam/pathReport"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Assets card Info (bulk)",
        "tags": [
          "events"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID mandatory to filter them by customers.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "description": "Id of the user that generates the action.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "iccid",
            "description": "Asset iccid(s) to filter. If it's more than one, separated by comma",
            "type": "string"
          },
          {
            "in": "query",
            "name": "eid",
            "description": "eSIM eid(s) to filter. If it's more than one, separated by comma",
            "type": "string"
          },
          {
            "in": "query",
            "name": "action",
            "description": "Action(s) to filter. If it's more than one, separated by comma",
            "type": "string"
          },
          {
            "in": "query",
            "name": "created",
            "description": "To match a range place two datetimes separated by comma. Range filtering support partial dates as YYYY, YYYY-MM, YYYY-MM:DD HH, etc.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "showSubaccounts",
            "description": "Show all the events for your account and subaccounts. By default is false",
            "type": "string",
            "enum": [
              "yes",
              "no"
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the SIM card attributes. Default is unsorted.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to ascendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "in": "query",
            "name": "format",
            "required": false,
            "enum": [
              "json",
              "csv"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of events.",
            "type": "array",
            "schema": {
              "$ref": "#/definitions/Events"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/zones-schemes": {
      "get": {
        "summary": "Get zones schemes",
        "description": "Get all zones schemes",
        "tags": [
          "zones"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "carrier",
            "description": "filter by carrier",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of zone schemes",
            "schema": {
              "type": "array",
              "items": {
                "schema": {
                  "$ref": "#/definitions/ZoneScheme"
                }
              }
            }
          }
        }
      }
    },
    "/zones-schemes/{zoneSchemeId}": {
      "get": {
        "summary": "Get a zone schemes",
        "description": "Get a zone schemes",
        "tags": [
          "zones"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "zoneSchemeId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of accounts",
            "schema": {
              "type": "array",
              "items": [
              ]
            }
          }
        }
      }
    },
    "/bulk/assets/subscribe": {
      "post": {
        "summary": "Activate a bulk of assets and subscribe the assets to the assigned product.",
        "description": "Activate a bulk of assets and subscribe the assets to the assigned product.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.<br /> <br /> <b>ipPools</b>, When subscribing multi-imsi sims please note you will need to specify the poolid for each of the imsi providers. <br /> If one of the ippools is not specified in your call we will assign a dynamic IP for that IMSI by default.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "subscriberAccount": {
                          "type": "string",
                          "required": true
                        },
                        "productId": {
                          "type": "string",
                          "required": true
                        },
                        "startTime": {
                          "type": "string"
                        },
                        "ipPools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "carrier": {
                                "type": "string"
                              },
                              "poolId": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/transfer": {
      "post": {
        "summary": "Transfer a Asset from a account to another in bulk",
        "description": "Transfer a Asset from a account to another in bulk",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "originAccount",
                    "destinyAccount"
                  ],
                  "properties": {
                    "originAccount": {
                      "type": "string"
                    },
                    "destinyAccount": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/return": {
      "post": {
        "summary": "Return a Asset from a account to parent account in bulk",
        "description": "Return a Asset from a account to parent account in bulk",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "accountId"
                  ],
                  "properties": {
                    "accountId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/suspend": {
      "put": {
        "summary": "Suspend assets in bulk mode",
        "description": "Suspend assets in a massive way by using different filters",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/unsuspend": {
      "put": {
        "summary": "Unsuspend (Unlock) assets in bulk mode",
        "description": "This endpoint change in a massive way the suspend status of the assets which match with the filter setted.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/resubscribe": {
      "post": {
        "summary": "Resubscribe a bulk of assets to the assigned product.",
        "description": "Resubscribe a bulk of assets to the assigned product.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "subscriberAccount": {
                          "type": "string"
                        },
                        "productId": {
                          "type": "string"
                        },
                        "startTime": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets": {
      "post": {
        "summary": "Create Assets in bulk mode",
        "description": "Create Assets in bulk mode",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The accountId makes reference to the account of the person that is creating the Asset. Optionally you can indicate the name of the asset",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "iccids"
              ],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "put": {
        "summary": "Update Assets in bulk mode",
        "description": "Update Assets in bulk mode",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/groupname": {
      "put": {
        "summary": "Update group name of Assets in bulk mode",
        "description": "Update group name of Assets in bulk mode",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "groupname": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/limit": {
      "post": {
        "summary": "Set limits in bulk.",
        "description": "You can set the limit for data (limit or datalimit) or sms (smslimit). Is mandatory to set one of them at least, but you can set both.<br>Datalimit must be set on bytes.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number"
                    },
                    "smslimit": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/alerts": {
      "put": {
        "summary": "Alerts in bulk.",
        "description": "- A maximum of 3 alerts per SIM can be set in order to notify the user when the consumption of a  promotion  reaches or exceeds a certain limit, Alerts can also be used to notify the user of usage over their predefined bundle amount.\n- Use `in_cost` alert to notify when the SIMs in bundle cost has reached the limit. Use `out_cost` alert to notify when the SIMs out of bundle costs (overuse) has reached the limit. Use `in_percent` alert to notify when the promotion / bundle depletion has reached certain percent set by the limit. Use `out_percent` alert to notify when the promotion / bundle overuse has reached certain percent set by the limit.\n- Use `desktop` to put a notification on the web platforms only. Use `email_default` to send a notification to the default email set on the web platforms, or `email_alternative` to send to the additional alternative email set on the web platforms. A desktop will always show even when email notification is set only.\n",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "alternativeEmail": {
                      "type": "string"
                    },
                    "alerts": {
                      "$ref": "#/definitions/assetAlerts/dataAlerts"
                    },
                    "smsAlerts": {
                      "$ref": "#/definitions/assetAlerts/smsAlerts"
                    },
                    "statusAlerts": {
                      "$ref": "#/definitions/assetAlerts/statusAlerts"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/sms": {
      "post": {
        "summary": "Send SMS in bulk.",
        "description": "Sends a message to the SIM limited to 160 characters. A single SMS can hold up to 160 characters using \"Stardard\" coding, some special characters are allowed but they consume double space. Using characters out of the standard set requires UCS-2 coding and the message size is limited to 70 characters.<br><br>Use data coding scheme 240 for a Flash SMS, and 0 for a Standard SMS. A Flash SMS is displayed on the screen immediately upon arrival but is not saved or stored on the device. A Standard SMS is displayed and saved to the device",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "dcs": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/purge": {
      "post": {
        "summary": "Purge from Network in bulk.",
        "description": "Forces an update location on the SIM. Useful to remotely reset the network connection on a SIM (refresh connection).",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "confirm": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/bulk/assets/update/template": {
      "post": {
        "summary": "Download template for bulk update.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "query",
            "name": "blankTemplate",
            "type": "boolean",
            "description": "true if you want only the headers"
          },
          {
            "in": "body",
            "name": "body",
            "description": "any filter can be in body for large parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "Template in CSV.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "iccid,name,group"
                }
              }
            }
          }
        }
      }
    },
    "/bulk/assets/update/process": {
      "post": {
        "summary": "Bulk updates.",
        "description": "Bulk updates of assets for name, group and custom attributes uploading a CSV file.",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/assets/reallocate-ip": {
      "post": {
        "summary": "Reassign a new IP in a bulk of assets.",
        "description": "Reassign a new IP in a bulk of assets selecting to assign a new dynamic IP or a security service.",
        "tags": [
          "bulk"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryIccid"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnership"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryMsisdn"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryType"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryProfileState"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryActivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryReactivationDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySubscriptionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySuspensionDate"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLastConnection"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryUsage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLocation"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/assetRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/assetRouterParams/queryOrder"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "<b>ipPools</b>, Include in this array an item for each carrier where you want to reassign the IP. <br/> If one of the providers (carrier) is not in the array, the current IP will be kept. If an entry has poolId as null, (meaning there is no destined IP range or a security service for it ) we will assign a dynamic IP for that IMSI.",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "ipPools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "carrier": {
                        "type": "string"
                      },
                      "poolId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/payments/topupPaypal": {
      "post": {
        "summary": "Validates a new Paypal transaction",
        "description": "Retrieve the URL and params for the redirection.\n\n```\n  var xmlhttp = new XMLHttpRequest();\n  var orderId;\n  var ACCESSTOKEN = '[ACCESSTOKEN]'\n  var BASE_URL = 'https://hummingbird-dev.podgroup.com/v3';\n  paypal.Button.render({\n    env: 'sandbox', // sandbox | production\n    // Show the buyer a 'Pay Now' button in the checkout flow\n    // commit: true,\n    style: {\n      label: 'paypal',\n      size:  'responsive',    // small | medium | large | responsive\n      shape: 'rect',     // pill | rect\n      color: 'blue',     // gold | blue | silver | black\n      tagline: false\n    },\n    // payment() is called when the button is clicked\n    payment: function() {\n      // Set up a url on your server to create the payment\n      var CREATE_URL = BASE_URL + '/payments/topupPaypal';\n\n      // Set up the data\n      var data = {\n        \"accountId\": \"[AccountId]\",\n        \"amount\": 9,\n        \"currency\": \"EUR\",\n        \"returnUrl\": \"http://www.example.com/returnUrl\",\n        \"cancelUrl\": \"http://www.example.com/cancelUrl\"\n      }\n  \n      // Make a call to your server to set up the payment\n      return axios.post(CREATE_URL, data, {headers: {\"x-access-token\": ACCESSTOKEN}})\n        .then(function(res) {\n          orderId = res.data.orderId;\n          return res.data.providerId;\n        });\n  \n      },\n  \n      // onAuthorize() is called when the buyer approves the payment\n      onAuthorize: function(data, actions) {\n  \n        // Set up a url on your server to execute the payment\n        var EXECUTE_URL = BASE_URL + '/payments/confirmTopupPaypal';\n  \n        // Set up the data you need to pass to your server\n        var data = {\n          orderId: orderId,\n          accountId: \"[AccountId]\",\n          status: true\n        };\n  \n        // Make a call to your server to execute the payment\n        return axios.post(EXECUTE_URL, data, {headers: {\"x-access-token\": ACCESSTOKEN}})\n          .then(function (res) {\n            window.alert('Payment Complete!');\n        });\n    }\n  \n    }, '#paypal-button-container');\n\n```\n",
        "tags": [
          "payments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "amount"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "amount": {
                  "type": "number"
                },
                "currency": {
                  "type": "string"
                },
                "returnUrl": {
                  "type": "string"
                },
                "cancelUrl": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the 2 ids you need for the Paypal modal.",
            "schema": {
              "type": "object",
              "properties": {
                "orderId": {
                  "type": "string"
                },
                "providerId": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/payments/confirmTopupPaypal": {
      "post": {
        "summary": "Confirms a Paypal transaction",
        "description": "Confirms a Paypal transaction",
        "tags": [
          "payments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "orderId",
                "status"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "orderId": {
                  "type": "string"
                },
                "status": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "402": {
            "description": "PaymentRequiredError.",
            "schema": {
              "$ref": "#/definitions/PaymentRequired"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/security/alerts": {
      "get": {
        "summary": "Get security alerts for an account",
        "description": "Retrieves security alerts for an account",
        "tags": [
          "security, alerts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID is mandatory in order to know which account are you operating from",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "alarmLink",
            "description": "Alert alarm link",
            "type": "string"
          },
          {
            "in": "query",
            "name": "archived",
            "description": "Set to `true` to get archived Alerts. Default value is `false`",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "description",
            "description": "To filter by exact description",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destinationEthernet",
            "description": "To filter by Destination Ethernet",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destinationIP",
            "description": "To filter by Destination IP",
            "type": "string"
          },
          {
            "in": "query",
            "name": "destinationPort",
            "description": "To filter by Destination port",
            "type": "string"
          },
          {
            "in": "query",
            "name": "iccid",
            "description": "To filter by ICCID",
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "To filter Alert by id",
            "type": "number"
          },
          {
            "in": "query",
            "name": "protocol",
            "description": "To filter by Protocol",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourceEthernet",
            "description": "To filter by Source Ethernet",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourceIP",
            "description": "To filter by Source IP",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourcePort",
            "description": "To filter by Source port",
            "type": "string"
          },
          {
            "in": "query",
            "name": "time",
            "description": "To filter Alert by time",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "timeStamp",
            "description": "To filter Alert by exact time stamp",
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "type",
            "description": "To filter by Alert type",
            "type": "string"
          },
          {
            "in": "query",
            "name": "visible",
            "description": "To filter by Alert visibility",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Sets the number of results to return per page. The default limit is `10`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Returns the content of the results page. The default page is `1`.",
            "required": false,
            "type": "number"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "It sorts the results by any of the Alert attributes. Default is `time`.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "It sorts ascendant or descendant. Defaults to descendant.",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Alerts, empty array if nothing is found..",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Alert"
              }
            }
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    },
    "/security/alerts/{alertId}": {
      "get": {
        "summary": "Get security alert for an account",
        "description": "Fetches security alerts for an account",
        "tags": [
          "security, alerts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID is mandatory in order to know which account are you operating from",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "alertId",
            "description": "To know what alert to find",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alert",
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      },
      "put": {
        "summary": "Edits security alert for an account",
        "description": "Edits security alerts for an account",
        "tags": [
          "security, alerts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID is mandatory in order to know which account are you operating from",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "alertId",
            "description": "To know what alert to edit",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "alarmLink": {
                  "type": "string"
                },
                "archived": {
                  "type": "boolean"
                },
                "description": {
                  "type": "string"
                },
                "destinationEthernet": {
                  "type": "string"
                },
                "destinationIP": {
                  "type": "string"
                },
                "destinationPort": {
                  "type": "string"
                },
                "protocol": {
                  "type": "string"
                },
                "sourceEthernet": {
                  "type": "string"
                },
                "sourceIP": {
                  "type": "string"
                },
                "sourcePort": {
                  "type": "string"
                },
                "time": {
                  "type": "string",
                  "format": "date-time"
                },
                "timeStamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "type": {
                  "type": "string"
                },
                "visible": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Alert",
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      },
      "delete": {
        "summary": "Deletes security alert for an account",
        "description": "Deletes security alerts for an account",
        "tags": [
          "security, alerts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "description": "Account ID is mandatory in order to know which account are you operating from",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "alertId",
            "description": "To know what alert to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Acknowledgement of successful request"
          },
          "400": {
            "description": "Invalid Parameters."
          },
          "401": {
            "description": "Authentication error."
          },
          "403": {
            "description": "Not Authorized"
          },
          "500": {
            "description": "Internal Application Error."
          },
          "503": {
            "description": "Service Unavailable."
          }
        }
      }
    },
    "/graph/security/topthreaten": {
      "get": {
        "summary": "Get Top 10 subscribers threatened. Type Table",
        "description": "Get Top 10 subscribers threatened. Type Table",
        "tags": [
          "security, charts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isThreat",
            "description": "Type of alert you want to aggregate. True is Threaten, false is other type. By default is True",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsPie"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/security/byalarmtype": {
      "get": {
        "summary": "Get Counter of alert grouped by type of security alert. Type Pie",
        "description": "Get Counter of alert grouped by type of security alert. Type Pie",
        "tags": [
          "security, charts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isThreat",
            "description": "Type of alert you want to aggregate. True is Threaten, false is other type. By default is True",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsTable"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/esims": {
      "get": {
        "summary": "Get eSIMs of an account",
        "description": "Retrive the information stored about eSIMs for an account and below.",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/querySmart"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM cards Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eSIM"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new eSIM",
        "description": "Create a new eSIM. Profiles must already exist, belong to same accountId and comply with all restrictions for eSIMs\n- One bootstrap profile per eSIM\n- One enabled profile per eSIM\n- Profiles not enabled, must be in disabled state\n- All profiles must belong to the same account that the eSIM\n",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The accountId makes reference to the account of the person that is creating the eSIM. Optionally you can indicate the name/group of the eSIM.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "eid",
                "profiles"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "eid": {
                  "type": "string"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "iccid": {
                        "type": "string"
                      }
                    }
                  }
                },
                "eSimName": {
                  "type": "string"
                },
                "eSimGroupName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/esimsbulk": {
      "post": {
        "summary": "Get esims of an account (bulk)",
        "description": "Retrive the information stored about eSIMs for an account and below.",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/querySmart"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM cards Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eSIM"
              }
            }
          }
        }
      }
    },
    "/esims/{eid}": {
      "get": {
        "summary": "eSIM info",
        "description": "get eSIM info by EID",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      },
      "put": {
        "summary": "Change setup for the specified accountId",
        "description": "Change eSimName and/or eSimGroupName of the eSIM for the specified accountId",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "eSim",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "eSimName": {
                  "type": "string"
                },
                "eSimGroupName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/transfer": {
      "post": {
        "summary": "Transfer a ESim from a account to another",
        "description": "Transfer a ESim from a account to another",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId",
                "originAccountId",
                "destinyAccountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "originAccountId": {
                  "type": "string"
                },
                "destinyAccountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/esims/{eid}/return": {
      "post": {
        "summary": "Return a ESim from a account to parent account",
        "description": "Return a ESim from a account to parent account",
        "tags": [
          "esims"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/assetRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/assetRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/AssetSimcard"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/esims/{eid}/subscribe": {
      "put": {
        "summary": "Activate the enabled profile and subscribe it to the assigned product.",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.<br /> <br /> <b>ipPools</b>, When subscribing multi-imsi sims please note you will need to specify the poolid for each of the imsi providers. <br /> If one of the ippools is not specified in your call we will assign a dynamic IP for that IMSI by default.",
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "subscription": {
                  "type": "object",
                  "properties": {
                    "subscriberAccountId": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date"
                    },
                    "ipPools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "carrier": {
                            "type": "string"
                          },
                          "poolId": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/suspend": {
      "put": {
        "summary": "Suspend enabled profile.",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/unsuspend": {
      "put": {
        "summary": "Reactivate enabled profile.",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/alerts": {
      "put": {
        "summary": "Set alerts enabled profile.",
        "description": "- You can set data alerts (alerts array) and sms alerts (smsAlerts array). You can set both or one of them.\n- Use `in_cost` alert to notify when the SIMs in bundle cost has reached the limit. Use `out_cost` alert to notify when the SIMs out of bundle costs (overuse) has reached the limit. Use `in_percent` alert to notify when the promotion / bundle depletion has reached certain percent set by the limit. Use `out_percent` alert to notify when the promotion / bundle overuse has reached certain percent set by the limit.\n- Use `desktop` to put a notification on the web platforms only. Use `email_default` to send a notification to the default email set on the web platforms, or `email_alternative` to send to the additional alternative email set on the web platforms. A desktop will always show even when email notification is set onlY.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "description": "The collection of alerts. A max. of 3 alerts per SIM is allowed.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "accountId"
              ],
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "alternativeEmail": {
                  "type": "string"
                },
                "alerts": {
                  "$ref": "#/definitions/assetAlerts/dataAlerts"
                },
                "smsAlerts": {
                  "$ref": "#/definitions/assetAlerts/smsAlerts"
                },
                "statusAlerts": {
                  "$ref": "#/definitions/assetAlerts/statusAlerts"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/purge": {
      "post": {
        "summary": "Reactivate enabled profile.",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/sms": {
      "post": {
        "summary": "Send sms to enabled profile.",
        "description": "Sends a message to the SIM limited to 160 characters. A single SMS can hold up to 160 characters using \"Stardard\" coding, some special characters are allowed but they consume double space. Using characters out of the standard set requires UCS-2 coding and the message size is limited to 70 characters.<br><br>Use data coding scheme 240 for a Flash SMS, and 0 for a Standard SMS. A Flash SMS is displayed on the screen immediately upon arrival but is not saved or stored on the device. A Standard SMS is displayed and saved to the device",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "message",
            "required": true,
            "description": "dcs by default 240, optional 0 for Standar SMS.",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "message": {
                  "type": "string",
                  "required": true
                },
                "dcs": {
                  "type": "string"
                },
                "origin": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/limit": {
      "post": {
        "summary": "Set limits for enabled profile.",
        "description": "You can set the limit for data (limit or datalimit) or sms (smslimit). Is mandatory to set one of them at least, but you can set both.<br>Datalimit must be set on bytes.",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "description": "dcs by default 240, optional 0 for Standar SMS.",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "datalimit": {
                  "type": "number"
                },
                "smslimit": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/download-profile": {
      "post": {
        "summary": "Download profile to eSIM",
        "description": "DownloadProfile (ES2) creates a new Issuer Security Domain - Profile (ISD-P) on an eSIM, and then downloads and installs the specified profile onto the card.\nOptionally, the installed profile can also be enabled as part of this process. Otherwise, the new profile is installed in the Disabled state.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "iccid": {
                  "type": "string",
                  "required": true
                },
                "enable": {
                  "type": "boolean"
                },
                "uuid": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/enable-profile": {
      "post": {
        "summary": "Enable eSIM profile",
        "description": "Moves a profile that is installed on an eSIM from the Disabled state to the Enabled state.\nTo enable the target profile, the profile that is currently active on the card must also be disabled.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "iccid": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/disable-profile": {
      "post": {
        "summary": "Disable eSIM profile",
        "description": "Moves a profile that is installed on an eSIM from the Enabled state to the Disabled state.\nTo ensure that card connectivity is maintained, disabling the active profile automatically enables the Bootstrap Profile.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/delete-profile": {
      "post": {
        "summary": "Delete eSIM profile",
        "description": "Removes a profile from an eSIM.\nIf the profile to be deleted is in the Enabled state, it is first moved to the Disabled state.\nThen, to ensure that card connectivity is maintained, the Bootstrap Profile is enabled.\nThe Bootstrap Profiles (BS) have the fallback attribute, hence cannot be deleted.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                },
                "iccid": {
                  "type": "string"
                },
                "iccids": {
                  "type": "array",
                  "description": "used for delete more than one profile, if is set, iccid will be ignored",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/esims/{eid}/audit": {
      "post": {
        "summary": "Audit eSIM",
        "description": "Audit an eSIM and all its downloaded profiles.\n",
        "tags": [
          "esims"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/pathEid"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "eSIM card Info.",
            "schema": {
              "$ref": "#/definitions/eSIM"
            }
          }
        }
      }
    },
    "/bulk/esims": {
      "put": {
        "summary": "Change eSims setup for the specified accountId",
        "description": "Change eSimName and/or eSimGroupName of the eSIMs for the specified accountId",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "eSimName": {
                      "type": "string"
                    },
                    "eSimGroupName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/transfer": {
      "post": {
        "summary": "Transfer an eSIM and its profiles from an account to another in bulk",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "originAccountId": {
                      "type": "string",
                      "required": true
                    },
                    "destinyAccountId": {
                      "type": "string",
                      "required": true
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/return": {
      "post": {
        "summary": "Return a ESim from a account to parent account",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "type": "string",
                      "required": true
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/subscribe": {
      "post": {
        "summary": "Activate a bulk of enabled profiles and subscribe the assets to the assigned product.",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "If the timezone is not defined in the startTime value, will be used UTC by default.<br /> <br /> <b>ipPools</b>, When subscribing multi-imsi sims please note you will need to specify the poolid for each of the imsi providers. <br /> If one of the ippools is not specified in your call we will assign a dynamic IP for that IMSI by default.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "subscriberAccount": {
                          "type": "string",
                          "required": true
                        },
                        "productId": {
                          "type": "string",
                          "required": true
                        },
                        "startTime": {
                          "type": "string"
                        },
                        "ipPools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "carrier": {
                                "type": "string"
                              },
                              "poolId": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/suspend": {
      "put": {
        "summary": "Suspend a bulk of enabled profiles",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/unsuspend": {
      "put": {
        "summary": "Reactivate a bulk of enabled profiles",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/alerts": {
      "put": {
        "summary": "Set alerts in a bulk of enabled profiles",
        "description": "- You can set data alerts (alerts array) and sms alerts (smsAlerts array). You can set both or one of them.\n- Use `in_cost` alert to notify when the SIMs in bundle cost has reached the limit. Use `out_cost` alert to notify when the SIMs out of bundle costs (overuse) has reached the limit. Use `in_percent` alert to notify when the promotion / bundle depletion has reached certain percent set by the limit. Use `out_percent` alert to notify when the promotion / bundle overuse has reached certain percent set by the limit.\n- Use `desktop` to put a notification on the web platforms only. Use `email_default` to send a notification to the default email set on the web platforms, or `email_alternative` to send to the additional alternative email set on the web platforms. A desktop will always show even when email notification is set onlY.\n",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "confirm": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/purge": {
      "post": {
        "summary": "Purge a bulk of enabled profiles",
        "description": "Forces an update location on the SIM. Useful to remotely reset the network connection on a SIM (refresh connection).",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "confirm": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/sms": {
      "post": {
        "summary": "Send SMS in bulk to enabled profiles",
        "description": "Sends a message to the SIM limited to 160 characters. A single SMS can hold up to 160 characters using \"Stardard\" coding, some special characters are allowed but they consume double space. Using characters out of the standard set requires UCS-2 coding and the message size is limited to 70 characters.<br><br>Use data coding scheme 240 for a Flash SMS, and 0 for a Standard SMS. A Flash SMS is displayed on the screen immediately upon arrival but is not saved or stored on the device. A Standard SMS is displayed and saved to the device",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "dcs": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/bulk/esims/limit": {
      "post": {
        "summary": "Set limits in bulk for enabled profiles",
        "description": "You can set the limit for data (limit or datalimit) or sms (smslimit). Is mandatory to set one of them at least, but you can set both.<br>Datalimit must be set on bytes.",
        "tags": [
          "bulk"
        ],
        "produces": "-application/json",
        "parameters": [
          {
            "$ref": "#/definitions/eSimRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEsimGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryAccountName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileIccid"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileGroupName"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileMsisdn"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileInOveruse"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileProduct"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileActivationDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileSuspensionDate"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLastConnection"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileLocation"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileImsisType"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileCarriers"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryEnabledProfileBootstrap"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryProfilesStatus"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryMinProfiles"
          },
          {
            "$ref": "#/definitions/eSimRouterParams/queryOwnerAccountId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number"
                    },
                    "smslimit": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Bulk process object.",
            "schema": {
              "$ref": "#/definitions/Bulk"
            }
          }
        }
      }
    },
    "/graph/1": {
      "get": {
        "summary": "Get bytes consumed by an account. Type Line",
        "description": "Get bytes consumed by an account.Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/2": {
      "get": {
        "summary": "Get amount of cdrs by an account. Type Line",
        "description": "Get amount of cdrs by an account.Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/3": {
      "get": {
        "summary": "Get amount of cdrs aggregated by the mcc in an account. Type Pie",
        "description": "Get amount of cdrs aggregated by the mcc in an account. Type Pie",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsPie"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/4": {
      "get": {
        "summary": "Get amount of cdrs aggregated by the mcc and the mnc in an account. Type Pie",
        "description": "Get amount of cdrs aggregated by the mcc and the mnc in an account. Type Pie",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsPie"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/5": {
      "get": {
        "summary": "Get CDRs aggregated by Products in an account. Type Line",
        "description": "Get CDRs aggregated by Products in an account. Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/6": {
      "get": {
        "summary": "Get bytes consumed and aggregated by ICCID in an account. Type Table",
        "description": "Get bytes consumed and aggregated by ICCID in an account. Type Table",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsTable"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/7": {
      "get": {
        "summary": "Get CDRs aggregated by ICCID in an account. Type Table",
        "description": "Get CDRs aggregated by ICCID in an account. Type Table",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsTable"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/8": {
      "get": {
        "summary": "Get bytes consumed and aggregated by account for the current month and the previous month. Type Line",
        "description": "Get bytes consumed and aggregated by account for the current month and the previous month. Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/9": {
      "get": {
        "summary": "Get CDRs aggregated by account for the current month and the previous month. Type Line",
        "description": "Get CDRs aggregated by account for the current month and the previous month. Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/10": {
      "get": {
        "summary": "Get stats of products by account for the current month. Type Table",
        "description": "Get stats of products by account for the current month. The period is from the first day of the current month to today. Type Table",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsTable"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/11": {
      "get": {
        "summary": "Get status of simcards by account. Type Pie",
        "description": "Get status of simcards by account. Type Pie",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "required": false,
            "type": "string",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "enum": [
              "d",
              "h",
              "m"
            ]
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsPie"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/12": {
      "get": {
        "summary": "Get cost consumed by an account. Type Line",
        "description": "Get cost consumed by an account. Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/graph/statusesperday": {
      "get": {
        "summary": "Get the simcard status per day by an account. Type Line",
        "description": "Get the simcard status per day by an account. Type Line",
        "tags": [
          "graphs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "unit",
            "description": "Unit of time. It is a range of time what you will search. By default is hours ('h')",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "quantity",
            "description": "Quantity of time. How many units you will search. By default is 7",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of accounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GraphsLine"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/status/components": {
      "get": {
        "summary": "Get components that are not fully operational and are being used in this account",
        "tags": [
          "status"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-access-token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of components with their status.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/statusComponent"
              }
            }
          }
        }
      }
    },
    "/assets/{iccid}/quick-dial": {
      "post": {
        "summary": "Add a short dial entry",
        "tags": [
          "quick-dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true,
                  "description": "Account ID for user context."
                },
                "location": {
                  "type": "string",
                  "required": true,
                  "description": "The memory location from \"00\" to \"99\""
                },
                "da": {
                  "type": "string",
                  "required": true,
                  "description": "Destination address. Either another 'oa' to call another subscriber in the system, or a telephone number in full international format."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "QuickDial entry.",
            "schema": {
              "$ref": "#/definitions/quickDial"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of all quick dial entries for the SIM",
        "tags": [
          "quick-dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/dialRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of quickDial entries.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/quickDial"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/quick-dial/{location}": {
      "get": {
        "summary": "Show an individual quick dial entry in the SIM",
        "tags": [
          "quick-dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathLocation"
          },
          {
            "$ref": "#/definitions/dialRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "A quickDial entry.",
            "schema": {
              "$ref": "#/definitions/quickDial"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "put": {
        "summary": "Update a short dial entry",
        "tags": [
          "quick-dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathLocation"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true,
                  "description": "Account ID for user context."
                },
                "da": {
                  "type": "string",
                  "required": true,
                  "description": "Destination address. Either another 'oa' to call another subscriber in the system, or a telephone number in full international format."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A quickDial entry.",
            "schema": {
              "$ref": "#/definitions/quickDial"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a short dial entry. Use \"all\" as location param if all locations for an user need to be removed.",
        "tags": [
          "quick-dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathLocation"
          },
          {
            "$ref": "#/definitions/dialRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted. No Content."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/assets/{iccid}/dial": {
      "post": {
        "summary": "Make MT voice call.",
        "description": "Forces to make a MT voice call to a SIM. This function is used to make the client perform a task when it gets a call.",
        "tags": [
          "dial"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/dialRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/dialRouterParams/pathIccid"
          },
          {
            "in": "body",
            "name": "payload",
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "required": true,
                  "description": "Account ID for user context."
                },
                "oa": {
                  "type": "string",
                  "required": true,
                  "description": "Origin address. The CLI to send for the call."
                },
                "timer": {
                  "type": "number",
                  "description": "The time it will ring for. [0-30]"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "call completed",
            "schema": {
              "$ref": "#/definitions/dialResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Unauthorized"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/Internal"
            }
          }
        }
      }
    },
    "/steeringlists": {
      "get": {
        "summary": "Get steering lists of an account",
        "description": "Retrive the information stored about all steering lists for an account.",
        "tags": [
          "steeringList"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/steeringListRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/steeringListRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "steeringLists Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/steeringList"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new steering list",
        "tags": [
          "steeringList"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/steeringListRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created steering list Info.",
            "schema": {
              "$ref": "#/definitions/steeringList"
            }
          }
        }
      }
    },
    "/steeringlists/{steeringListId}": {
      "delete": {
        "summary": "Delete a steering list",
        "tags": [
          "steeringList"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/steeringListRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/steeringListRouterParams/pathSteeringListId"
          },
          {
            "$ref": "#/definitions/steeringListRouterParams/queryAccountId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a success message.",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns": {
      "get": {
        "summary": "Get campaigns of an account",
        "description": "Retrive the information stored about campaigns for an account.",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryName"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryStartTime"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "campaigns Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/campaign"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a campaign",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "properties": {
              "accountId": {
                "type": "string",
                "required": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "steering",
                  "download_profile"
                ],
                "required": true
              },
              "filters": {
                "type": "object",
                "required": true
              },
              "scheduled": {
                "type": "string",
                "format": "dateTime"
              },
              "steeringList": {
                "type": "string",
                "description": "required if type is steering"
              },
              "downloadProfile": {
                "$ref": "#/definitions/campaingDownloadProfile",
                "description": "required if type is download_profile"
              },
              "deleteProfile": {
                "$ref": "#/definitions/campaingDeleteProfile",
                "description": "required if type is delete_profile"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "campaign Info.",
            "schema": {
              "$ref": "#/definitions/campaign"
            }
          }
        }
      },
      "put": {
        "summary": "Edit a campaign",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "properties": {
              "accountId": {
                "type": "string",
                "required": true
              },
              "filters": {
                "type": "object"
              },
              "steeringList": {
                "type": "string"
              },
              "scheduled": {
                "type": "string",
                "format": "dateTime"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "campaign Info.",
            "schema": {
              "$ref": "#/definitions/campaign"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a campaign",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          }
        ],
        "responses": {
          "200": {
            "description": "campaign Info.",
            "schema": {
              "$ref": "#/definitions/campaign"
            }
          }
        }
      }
    },
    "/campaigns/{campaignId}": {
      "get": {
        "summary": "Get a campaign",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/campaignRouterParams/pathCampaignId"
          }
        ],
        "responses": {
          "200": {
            "description": "campaign Info.",
            "schema": {
              "$ref": "#/definitions/campaign"
            }
          }
        }
      }
    },
    "/campaigns/completion-forecast": {
      "post": {
        "summary": "Get campaign completion forecast",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignRouterParams/headerToken"
          },
          {
            "in": "body",
            "properties": {
              "accountId": {
                "type": "string",
                "required": true
              },
              "type": {
                "type": "string",
                "enum": [
                  "steering",
                  "download_profile",
                  "disable_profile",
                  "delete_profile",
                  "audit_esim"
                ],
                "required": true
              },
              "filters": {
                "type": "object",
                "required": true
              },
              "scheduled": {
                "type": "string",
                "format": "dateTime"
              },
              "steeringList": {
                "type": "string",
                "description": "required if type is steering"
              },
              "downloadProfile": {
                "$ref": "#/definitions/campaingDownloadProfile",
                "description": "required if type is download_profile"
              },
              "deleteProfile": {
                "$ref": "#/definitions/campaingDeleteProfile",
                "description": "required if type is delete_profile"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign completion forecast info.",
            "schema": {
              "type": "object",
              "properties": {
                "complete": {
                  "type": "number"
                },
                "total": {
                  "type": "number"
                },
                "minutes": {
                  "type": "number"
                },
                "errors": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaignId}/items": {
      "get": {
        "summary": "Get items of a campaign",
        "tags": [
          "campaigns"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/definitions/campaignItemRouterParams/headerToken"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryAccountId"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/pathCampaignId"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryStatus"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryLimit"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryPage"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/querySort"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryOrder"
          },
          {
            "$ref": "#/definitions/campaignItemRouterParams/queryFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "campaign items Info.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/campaignItem"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "accountRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathAccountId": {
        "in": "path",
        "name": "accountId",
        "required": true,
        "type": "string"
      },
      "pathNotificationId": {
        "in": "path",
        "name": "notificationId",
        "required": true,
        "type": "string"
      },
      "pathSecuritySettingId": {
        "in": "path",
        "name": "securitySettingId",
        "required": true,
        "type": "string"
      },
      "pathRolename": {
        "in": "path",
        "name": "rolename",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "required": true,
        "type": "string"
      },
      "queryIccid": {
        "in": "query",
        "name": "iccid",
        "type": "string",
        "description": "Filter notifications by iccid or eid. Multiple comma-separated values are allowed."
      },
      "queryValue": {
        "in": "query",
        "name": "value",
        "type": "string",
        "description": "Smart search by text. It can be by iccid or eid"
      },
      "queryRead": {
        "in": "query",
        "name": "read",
        "type": "boolean",
        "description": "Filter notifications by read status."
      },
      "queryDate": {
        "in": "query",
        "name": "date",
        "description": "Filter notifications by date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "type": "string"
      },
      "queryId": {
        "in": "query",
        "name": "id",
        "description": "Filter acccounts by id. Multiple comma-separated values are allowed",
        "type": "string"
      },
      "queryType": {
        "in": "query",
        "name": "type",
        "description": "Filter Accounts by type. Multiple comma-separated values are allowed",
        "type": "string",
        "enum": [
          "reseller",
          "customer"
        ]
      },
      "queryName": {
        "in": "query",
        "name": "name",
        "type": "string",
        "description": "Filter Accounts by name. Multiple comma-separated values are allowed but 400 items maximum."
      },
      "queryDefaultEmail": {
        "in": "query",
        "name": "defaultEmail",
        "type": "string",
        "description": "Filter Accounts by default email. Multiple comma-separated values are allowed but 400 items maximum."
      },
      "queryResellerId": {
        "in": "query",
        "name": "resellerId",
        "type": "string"
      },
      "queryCreated": {
        "in": "query",
        "name": "created",
        "type": "string"
      },
      "queryStatus": {
        "in": "query",
        "name": "status",
        "description": "Filter Accounts by status. Multiple comma-separated values are allowed",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "suspended"
        ]
      },
      "queryLastAccess": {
        "in": "query",
        "name": "lastAccess",
        "description": "Filter Accounts by lastAccess. To match an exact datetime use format YYYY-MM-DD HH:mm:SS. To match a range place two datetimes separated by comma. Range filtering support partial dates as YYYY, YYYY-MM, YYYY-MM:DD HH, etc.",
        "type": "string"
      },
      "queryAccounts": {
        "in": "query",
        "name": "accounts",
        "description": "Filter Accounts by accountId. Multiple comma-separated values are allowed but 400 items maximum.",
        "type": "string"
      },
      "queryCurrency": {
        "in": "query",
        "name": "currency",
        "description": "Filter Accounts by currency.",
        "type": "string"
      },
      "queryWhiteLabel": {
        "in": "query",
        "name": "whitelabel",
        "description": "Filter Accounts by whitelabel.",
        "type": "boolean"
      },
      "querySecurityServiceType": {
        "in": "query",
        "name": "securityServiceType",
        "description": "Filter Accounts by securitySettings.type. Multiple comma-separated values are allowed",
        "type": "string"
      },
      "querySecurityCarrier": {
        "in": "query",
        "name": "securityCarrier",
        "description": "Filter Accounts by securitySettings.carrier. Multiple comma-separated values are allowed",
        "type": "string"
      },
      "queryIpAddress": {
        "in": "query",
        "name": "ipAddress",
        "description": "Filter Accounts by IP addres in one of its securitySettings.ranges.",
        "type": "string"
      },
      "queryLimit": {
        "in": "query",
        "name": "limit",
        "description": "Sets the number of results to return per page. The default limit is `10`.",
        "type": "string"
      },
      "queryPage": {
        "in": "query",
        "name": "page",
        "description": "Returns the content of the results page. The default page is `1`.",
        "type": "number"
      },
      "queryNotificationsSort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by this attribute. Default is unsorted.",
        "type": "string",
        "enum": [
          "read",
          "type",
          "created"
        ]
      },
      "queryAccountsSort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by any of the Account attributes. Default is unsorted.",
        "type": "string"
      },
      "queryOrder": {
        "in": "query",
        "name": "order",
        "description": "It sorts ascendant or descendant. Defaults to ascendant.",
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "queryNotificationsFormat": {
        "in": "query",
        "name": "format",
        "type": "string",
        "enum": [
          "json",
          "csv"
        ]
      },
      "queryAccountsFormat": {
        "in": "query",
        "name": "format",
        "type": "string",
        "enum": [
          "json",
          "csv",
          "tree"
        ]
      }
    },
    "assetRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathIccid": {
        "in": "path",
        "name": "iccid",
        "description": "Asset ID.",
        "required": true,
        "type": "string"
      },
      "queryValue": {
        "in": "query",
        "name": "value",
        "description": "Smart search by text. It can be used with SmartFilter",
        "type": "string"
      },
      "querySmartFilter": {
        "in": "query",
        "name": "smartFilter",
        "description": "Smart search by text. The default one is `all`",
        "type": "string",
        "enum": [
          "iccid",
          "msisdn",
          "name",
          "group",
          "ip",
          "product",
          "all"
        ]
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID mandatory to filter them by customers.",
        "required": true,
        "type": "string"
      },
      "queryIccid": {
        "in": "query",
        "name": "iccid",
        "description": "Filter SIM cards by ICCID. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEid": {
        "in": "query",
        "name": "eid",
        "description": "Filter ESIM cards by EID. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryOwnership": {
        "in": "query",
        "name": "ownership",
        "description": "Filter SIM cards by account id ownership. Multiple comma-separated values are allowed but 400 items maximum.",
        "type": "string"
      },
      "queryInOveruse": {
        "in": "query",
        "name": "inOveruse",
        "description": "filter by Assets in overuse.",
        "type": "boolean"
      },
      "queryMsisdn": {
        "in": "query",
        "name": "msisdn",
        "description": "Filter SIM cards by msisdn. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryName": {
        "in": "query",
        "name": "name",
        "description": "Filter by SIM card name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryGroupName": {
        "in": "query",
        "name": "groupname",
        "description": "Filter by group name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed but 400 items maximum.",
        "required": false,
        "type": "string"
      },
      "queryAccountName": {
        "in": "query",
        "name": "accountName",
        "description": "Filter by SIM card Account Name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed but 400 items maximum.",
        "required": false,
        "type": "string"
      },
      "queryOwnerAccountId": {
        "in": "query",
        "name": "ownerAccountId",
        "description": "ownerAccountId mandatory to filter them by customers.",
        "type": "string"
      },
      "queryStatus": {
        "in": "query",
        "name": "status",
        "description": "Filter by SIM card status (`inactive`, `active`, `preactive`, `suspend`). Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryType": {
        "in": "query",
        "name": "type",
        "description": "Filter by SIM card type (`SIM` or `eSIM Profile`).",
        "required": false,
        "type": "string",
        "enum": [
          "SIM",
          "eSIM Profile"
        ]
      },
      "queryProfileState": {
        "in": "query",
        "name": "profileState",
        "description": "Filter by SIM card state for eSIM profiles (`onstock`, `enabled`, `disabled`). Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryActivationDate": {
        "in": "query",
        "name": "activationDate",
        "description": "Filter SIM cards by first activation date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryReactivationDate": {
        "in": "query",
        "name": "reactivationDate",
        "description": "Filter SIM cards by last reactivation date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "querySubscriptionDate": {
        "in": "query",
        "name": "subscriptionDate",
        "description": "Filter SIM cards by last subscription date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "querySuspensionDate": {
        "in": "query",
        "name": "suspensionDate",
        "description": "Filter SIM cards by last suspension date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryLastConnection": {
        "in": "query",
        "name": "lastConnection",
        "description": "Filter SIM cards by last connection date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryUsage": {
        "in": "query",
        "name": "usage",
        "description": "Filter SIM cards by usage in bytes. To match a range place two values separated by comma.",
        "type": "string"
      },
      "queryLocation": {
        "in": "query",
        "name": "location",
        "description": "Filter by last connection `mcc-mnc`. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryProduct": {
        "in": "query",
        "name": "product",
        "description": "Filter assets by product Id",
        "type": "string"
      },
      "queryCarriers": {
        "in": "query",
        "name": "carriers",
        "description": "filter by carriers, divide by comma. By default returns any carrier of the list. If imsisType is 'multiimsis' return only assets with all these carriers",
        "type": "string"
      },
      "queryImsisType": {
        "in": "query",
        "name": "imsisType",
        "description": "filter by imsisType",
        "type": "string",
        "enum": [
          "singleimsis",
          "multiimsis"
        ]
      },
      "queryLimit": {
        "in": "query",
        "name": "limit",
        "description": "Sets the number of results to return per page. The default limit is `10`.",
        "required": false,
        "type": "string"
      },
      "queryPage": {
        "in": "query",
        "name": "page",
        "description": "Returns the content of the results page. The default page is `1`.",
        "required": false,
        "type": "number"
      },
      "querySort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by any of the SIM card attributes. Default is unsorted.",
        "required": false,
        "type": "string"
      },
      "queryOrder": {
        "in": "query",
        "name": "order",
        "description": "It sorts ascendant or descendant. Defaults to ascendant.",
        "required": false,
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "queryFormat": {
        "in": "query",
        "name": "format",
        "required": false,
        "type": "string",
        "enum": [
          "json",
          "csv"
        ]
      }
    },
    "assetAlerts": {
      "notification": {
        "type": "string",
        "enum": [
          "desktop",
          "email_default",
          "email_alternative",
          "push_notification"
        ],
        "description": "Notification type."
      },
      "limit": {
        "type": "number",
        "description": "Limit value."
      },
      "dataAlerts": {
        "type": "array",
        "items": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "in_cost",
                "in_percent",
                "out_cost",
                "out_percent",
                "in_bytes",
                "out_bytes",
                "total_bytes"
              ],
              "description": "Alert type."
            },
            "notification": {
              "$ref": "#/definitions/assetAlerts/notification"
            },
            "limit": {
              "$ref": "#/definitions/assetAlerts/limit"
            }
          }
        }
      },
      "statusAlerts": {
        "type": "array",
        "items": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "preactivation_depleted"
              ],
              "description": "Alert type."
            },
            "notification": {
              "$ref": "#/definitions/assetAlerts/notification"
            }
          }
        }
      },
      "smsAlerts": {
        "type": "array",
        "items": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "in_cost",
                "in_percent",
                "out_cost",
                "out_percent",
                "in_sms",
                "out_sms",
                "total_sms"
              ],
              "description": "Alert type."
            },
            "notification": {
              "$ref": "#/definitions/assetAlerts/notification"
            },
            "limit": {
              "$ref": "#/definitions/assetAlerts/limit"
            }
          }
        }
      }
    },
    "customReportParam": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true
      },
      "queryAccountId": {
        "type": "string",
        "in": "query",
        "name": "accountId",
        "required": true
      },
      "queryName": {
        "type": "string",
        "in": "query",
        "name": "name"
      },
      "queryOrder": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "in": "query",
        "name": "order"
      },
      "querySort": {
        "type": "string",
        "in": "query",
        "name": "sort"
      },
      "queryLimit": {
        "type": "string",
        "in": "query",
        "name": "limit"
      },
      "queryPage": {
        "type": "string",
        "in": "query",
        "name": "page"
      },
      "pathReport": {
        "in": "path",
        "name": "reportId",
        "description": "Unique Report id",
        "required": true,
        "type": "string"
      }
    },
    "FilterCustom": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "iccids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "productIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dateFrom": {
          "type": "string"
        },
        "dateTo": {
          "type": "string"
        }
      }
    },
    "CustomData": {
      "type": "object",
      "properties": {
        "iccids": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "iccid": {
                "type": "string"
              },
              "account": {
                "type": "string"
              },
              "product": {
                "type": "string"
              },
              "totalBytes": {
                "type": "number"
              },
              "totalSessions": {
                "type": "number"
              }
            }
          }
        },
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "account": {
                "type": "string"
              },
              "totalBytes": {
                "type": "number"
              },
              "totalSessions": {
                "type": "number"
              }
            }
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string"
              },
              "totalBytes": {
                "type": "number"
              },
              "totalSessions": {
                "type": "number"
              }
            }
          }
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string"
              },
              "totalBytes": {
                "type": "number"
              },
              "totalSessions": {
                "type": "number"
              }
            }
          }
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "product": {
                "type": "string"
              },
              "totalBytes": {
                "type": "number"
              },
              "totalSessions": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "FilterCustomReturned": {
      "type": "object",
      "properties": {
        "iccids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dateFrom": {
          "type": "string"
        },
        "dateTo": {
          "type": "string"
        }
      }
    },
    "CustomReportNodata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/FilterCustomReturned"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "total": {
          "type": "object",
          "properties": {
            "totalBytes": {
              "type": "number"
            },
            "totalSims": {
              "type": "number"
            },
            "totalAccounts": {
              "type": "number"
            },
            "totalLocations": {
              "type": "number"
            },
            "totalDays": {
              "type": "number"
            },
            "totalProducts": {
              "type": "number"
            }
          }
        }
      }
    },
    "CustomReportData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/FilterCustomReturned"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/CustomData"
        },
        "total": {
          "type": "object",
          "properties": {
            "totalBytes": {
              "type": "number"
            },
            "totalSims": {
              "type": "number"
            },
            "totalAccounts": {
              "type": "number"
            },
            "totalLocations": {
              "type": "number"
            },
            "totalDays": {
              "type": "number"
            },
            "totalProducts": {
              "type": "number"
            }
          }
        }
      }
    },
    "Alert": {
      "type": "object",
      "properties": {
        "alarmLink": {
          "type": "string"
        },
        "archived": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "destinationEthernet": {
          "type": "string"
        },
        "destinationIP": {
          "type": "string"
        },
        "destinationPort": {
          "type": "string"
        },
        "iccid": {
          "type": "string"
        },
        "id": {
          "type": "number"
        },
        "protocol": {
          "type": "string"
        },
        "sourceEthernet": {
          "type": "string"
        },
        "sourceIP": {
          "type": "string"
        },
        "sourcePort": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "timeStamp": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "eSimRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathEid": {
        "in": "path",
        "name": "eid",
        "description": "eSIM ID.",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID mandatory to filter them by customers.",
        "required": true,
        "type": "string"
      },
      "querySmart": {
        "in": "query",
        "name": "smart",
        "description": "smart search by eSIM ID, name or group. If this parameter is in the query, the search will be only based on this value, independent the other filters",
        "type": "string"
      },
      "queryEid": {
        "in": "query",
        "name": "eid",
        "description": "Filter SIM cards by EID. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEsimName": {
        "in": "query",
        "name": "eSimName",
        "description": "Filter by eSIM name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEsimGroupName": {
        "in": "query",
        "name": "eSimGroupName",
        "description": "Filter by eSIM group name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed but 400 items maximum.",
        "required": false,
        "type": "string"
      },
      "queryAccountName": {
        "in": "query",
        "name": "accountName",
        "description": "Filter by SIM card Account Name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed but 400 items maximum.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileIccid": {
        "in": "query",
        "name": "enabledProfileIccid",
        "description": "Filter eSIM cards by enabled profile ICCID. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileName": {
        "in": "query",
        "name": "enabledProfileName",
        "description": "Filter by enabled profile name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileGroupName": {
        "in": "query",
        "name": "enabledProfileGroupname",
        "description": "Filter by enabled profile group name. The search is case insensitive and matches partial names. Multiple comma-separated values are allowed but 400 items maximum.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileMsisdn": {
        "in": "query",
        "name": "EnabledProfileMsisdn",
        "description": "Filter by enabled profile msisdn. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileInOveruse": {
        "in": "query",
        "name": "enabledProfileInOveruse",
        "description": "filter by enabled profile in overuse.",
        "type": "boolean"
      },
      "queryEnabledProfileStatus": {
        "in": "query",
        "name": "enabledProfileStatus",
        "description": "Filter by enabled profile status (`inactive`, `active`, `preactive`, `suspend`). Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileProduct": {
        "in": "query",
        "name": "enabledProfileProduct",
        "description": "Filter by enabled profile product Id",
        "type": "string"
      },
      "queryEnabledProfileActivationDate": {
        "in": "query",
        "name": "enabledProfileActivationDate",
        "description": "Filter by enabled profile activation date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileSuspensionDate": {
        "in": "query",
        "name": "enabledProfileSuspensionDate",
        "description": "Filter by enabled profile suspension date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileLastConnection": {
        "in": "query",
        "name": "enabledProfileLastConnection",
        "description": "Filter by enabled profile last connection date. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileLocation": {
        "in": "query",
        "name": "enabledProfileLocation",
        "description": "Filter by enabled profile last connection `mcc-mnc`. Multiple comma-separated values are allowed.",
        "required": false,
        "type": "string"
      },
      "queryEnabledProfileImsisType": {
        "in": "query",
        "name": "enabledProfileImsisType",
        "description": "filter by imsisType",
        "type": "string",
        "enum": [
          "singleimsis",
          "multiimsis"
        ]
      },
      "queryEnabledProfileCarriers": {
        "in": "query",
        "name": "enabledProfileCarriers",
        "description": "filter by enabled profile carriers, divide by comma. By default returns any carrier of the list. If imsisType is 'multiimsis' return only assets with all these carriers",
        "type": "string"
      },
      "queryEnabledProfileBootstrap": {
        "in": "query",
        "name": "enabledProfileBootstrap",
        "description": "check if enabled profile is the bootstrap profile",
        "type": "boolean"
      },
      "queryOwnerAccountId": {
        "in": "query",
        "name": "ownerAccountId",
        "description": "ownerAccountId mandatory to filter them by customers.",
        "type": "string"
      },
      "queryProfilesStatus": {
        "in": "query",
        "name": "profilesStatus",
        "description": "filter by all profiles with an status. Not compatible with enabledProfile filters",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "suspended",
          "preactive"
        ]
      },
      "queryMinProfiles": {
        "in": "query",
        "name": "minProfiles",
        "description": "minimum number of profiles",
        "type": "number"
      },
      "queryLimit": {
        "in": "query",
        "name": "limit",
        "description": "Sets the number of results to return per page. The default limit is `10`.",
        "required": false,
        "type": "string"
      },
      "queryPage": {
        "in": "query",
        "name": "page",
        "description": "Returns the content of the results page. The default page is `1`.",
        "required": false,
        "type": "number"
      },
      "querySort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by this attribute. Default is unsorted.",
        "required": false,
        "type": "string",
        "enum": [
          "eid",
          "ownerAccountName",
          "eSimName",
          "eSimGroupName",
          "enabledProfileIccid",
          "enabledProfileModel",
          "enabledProfileMsisdn",
          "enabledProfileStatus",
          "enabledProfileAssetName",
          "enabledProfileGroupName",
          "enabledProfileMsisdn",
          "enabledProfileActivationDate",
          "enabledProfileSuspensionDate",
          "enabledProfileLastCall.endTime",
          "enabledProfileAccountLimit",
          "enabledProfileAccountSmsLimit",
          "enabledProfileCustomerLimit",
          "enabledProfileCustomerSmsLimit",
          "enabledProfileCustomerLocalProductName",
          "enabledProfileLocalProductName"
        ]
      },
      "queryOrder": {
        "in": "query",
        "name": "order",
        "description": "It sorts ascendant or descendant. Defaults to ascendant.",
        "required": false,
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "queryFormat": {
        "in": "query",
        "name": "format",
        "required": false,
        "type": "string",
        "enum": [
          "json",
          "csv"
        ]
      }
    },
    "GraphsLine": {
      "type": "object",
      "properties": {
        "x": {
          "type": "string"
        },
        "y": {
          "type": "number"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "GraphsPie": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string"
        },
        "element": {
          "type": "array"
        }
      }
    },
    "GraphsTable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "dialRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathIccid": {
        "in": "path",
        "name": "iccid",
        "description": "Asset ID.",
        "required": true,
        "type": "string"
      },
      "pathLocation": {
        "in": "path",
        "name": "location",
        "description": "The memory location from \"00\" to \"99\"",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID for user context.",
        "required": true,
        "type": "string"
      }
    },
    "quickDial": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "required": true,
          "description": "The memory location from \"00\" to \"99\""
        },
        "da": {
          "type": "string",
          "required": true,
          "description": "Either another 'oa' to call another subscriber in the system, or a telephone number in full international format"
        },
        "change": {
          "type": "string",
          "description": "Last change datetime in ISO format"
        }
      }
    },
    "dialResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string"
        },
        "responseReason": {
          "type": "string"
        }
      }
    },
    "steeringListRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathSteeringListId": {
        "in": "path",
        "name": "steeringListId",
        "description": "steering list ID.",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID mandatory to filter them by customers.",
        "required": true,
        "type": "string"
      }
    },
    "campaignRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathCampaignId": {
        "in": "path",
        "name": "campaignId",
        "description": "campaign ID.",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID mandatory to filter them by customers.",
        "required": true,
        "type": "string"
      },
      "queryName": {
        "in": "query",
        "name": "name",
        "description": "Smart search by name.",
        "type": "string"
      },
      "queryStatus": {
        "in": "query",
        "name": "status",
        "description": "Filter by status. Multiple comma-separated values are allowed.",
        "type": "string"
      },
      "queryStartTime": {
        "in": "query",
        "name": "status",
        "description": "Filter by startTime. To match an exact datetime use format `YYYY-MM-DD HH:mm:SS`. To match a range place two datetimes separated by comma. Range filtering support partial dates as `YYYY`, `YYYY-MM`, `YYYY-MM:DD HH`, etc.",
        "type": "string"
      },
      "queryLimit": {
        "in": "query",
        "name": "limit",
        "description": "Sets the number of results to return per page. The default limit is `10`.",
        "required": false,
        "type": "string"
      },
      "queryPage": {
        "in": "query",
        "name": "page",
        "description": "Returns the content of the results page. The default page is `1`.",
        "required": false,
        "type": "number"
      },
      "querySort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by this attribute. Default is unsorted.",
        "required": false,
        "type": "string",
        "enum": [
          "name",
          "startTime",
          "status"
        ]
      },
      "queryOrder": {
        "in": "query",
        "name": "order",
        "description": "It sorts ascendant or descendant. Defaults to ascendant.",
        "required": false,
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "queryFormat": {
        "in": "query",
        "name": "format",
        "required": false,
        "type": "string",
        "enum": [
          "json",
          "csv"
        ]
      }
    },
    "campaignItemRouterParams": {
      "headerToken": {
        "in": "header",
        "name": "x-access-token",
        "required": true,
        "type": "string"
      },
      "pathCampaignId": {
        "in": "path",
        "name": "campaignId",
        "description": "campaign ID.",
        "required": true,
        "type": "string"
      },
      "queryAccountId": {
        "in": "query",
        "name": "accountId",
        "description": "Account ID mandatory to filter them by customers.",
        "required": true,
        "type": "string"
      },
      "queryStatus": {
        "in": "query",
        "name": "status",
        "description": "Filter by status. Multiple comma-separated values are allowed.",
        "type": "string"
      },
      "queryLimit": {
        "in": "query",
        "name": "limit",
        "description": "Sets the number of results to return per page. The default limit is `10`.",
        "required": false,
        "type": "string"
      },
      "queryPage": {
        "in": "query",
        "name": "page",
        "description": "Returns the content of the results page. The default page is `1`.",
        "required": false,
        "type": "number"
      },
      "querySort": {
        "in": "query",
        "name": "sort",
        "description": "It sorts the results by this attribute. Default is unsorted.",
        "required": false,
        "type": "string",
        "enum": [
          "status"
        ]
      },
      "queryOrder": {
        "in": "query",
        "name": "order",
        "description": "It sorts ascendant or descendant. Defaults to ascendant.",
        "required": false,
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "queryFormat": {
        "in": "query",
        "name": "format",
        "required": false,
        "type": "string",
        "enum": [
          "json",
          "csv"
        ]
      }
    },
    "Account": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "required": true
        },
        "legalName": {
          "type": "string"
        },
        "defaultEmail": {
          "type": "string",
          "required": true
        },
        "defaultSmsOrigin": {
          "type": "string"
        },
        "currency": {
          "type": "string",
          "enum": [
            "USD",
            "EUR",
            "GBP",
            "MXN",
            "HKD",
            "CNY",
            "MYR",
            "AUD"
          ]
        },
        "resellerId": {
          "type": "string"
        },
        "bundles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "childIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "signUpDate": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "suspended"
          ],
          "default": "inactive"
        },
        "timezone": {
          "type": "string",
          "default": "UTC"
        },
        "type": {
          "type": "string",
          "enum": [
            "customer",
            "reseller",
            "test",
            "master"
          ],
          "default": "customer"
        },
        "billing": {
          "type": "object",
          "properties": {
            "balance": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "default": "postpay",
              "enum": [
                "prepay",
                "postpay"
              ]
            }
          }
        },
        "setup": {
          "type": "string"
        },
        "dashboardWidgets": {
          "type": "object"
        },
        "branding": {
          "type": "object",
          "properties": {
            "logoLarge": {
              "type": "string"
            },
            "logoSmall": {
              "type": "string"
            },
            "logoLogin": {
              "type": "string"
            },
            "loginPageMessage": {
              "type": "string"
            },
            "theme": {
              "type": "string"
            },
            "supportEmail": {
              "type": "string"
            },
            "notificationSenderEmail": {
              "type": "string"
            },
            "phoneSupport": {
              "type": "string"
            },
            "supportPageMessage": {
              "type": "string"
            },
            "domainURL": {
              "type": "string"
            },
            "emailDomain": {
              "type": "string"
            },
            "showBranding": {
              "type": "boolean"
            },
            "pageTitle": {
              "type": "string"
            }
          }
        },
        "theme": {
          "type": "string"
        },
        "operations": {
          "type": "object",
          "properties": {
            "dfSync": {
              "type": "boolean"
            },
            "parentSync": {
              "type": "boolean"
            },
            "userSync": {
              "type": "boolean"
            }
          }
        },
        "allowSupervision": {
          "type": "boolean"
        },
        "lastAccess": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountAddresses"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              }
            }
          }
        },
        "securitySettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountSecuritySetting"
          }
        }
      }
    },
    "AccountSecuritySetting": {
      "type": "object",
      "properties": {
        "poolId": {
          "type": "string",
          "required": true
        },
        "name": {
          "type": "string",
          "description": "Security Service Name",
          "required": true
        },
        "type": {
          "type": "string",
          "enum": [
            "vpn_client_access",
            "vpn_ipsec",
            "vpn_acl",
            "destined_ip_range"
          ],
          "description": "Security Service Type.",
          "required": true
        },
        "carrier": {
          "type": "string",
          "description": "Network type",
          "required": true
        },
        "ranges": {
          "type": "array",
          "required": true,
          "items": {
            "properties": {
              "address": {
                "type": "string",
                "required": true
              },
              "netmask": {
                "type": "number",
                "required": true
              },
              "hostMin": {
                "type": "number"
              },
              "hostMax": {
                "type": "number"
              },
              "usableHosts": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "AccountAddresses": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "String"
        },
        "addressLine1": {
          "type": "String"
        },
        "addressLine2": {
          "type": "String"
        },
        "addressCity": {
          "type": "String"
        },
        "addressStateOrRegion": {
          "type": "String"
        },
        "addressPostalCode": {
          "type": "String"
        },
        "addressPhoneNumber": {
          "type": "String"
        },
        "addressCountry": {
          "type": "String"
        },
        "taxIdNumber": {
          "type": "String"
        },
        "default": {
          "type": "Boolean"
        },
        "billingDisclaimer": {
          "type": "String"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "lastAccess": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "favorites": {
          "type": "object",
          "properties": {
            "disims": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "summaries": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "billing": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "users": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "products": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "accounts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "assets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "profile": {
          "type": "object",
          "properties": {
            "picture": {
              "type": "string"
            },
            "language": {
              "type": "string"
            },
            "timezone": {
              "type": "string"
            }
          }
        }
      }
    },
    "AssetSimcard": {
      "type": "object",
      "required": [
        "iccid"
      ],
      "properties": {
        "lastCall": {
          "type": "object",
          "properties": {
            "servingNetwork": {
              "type": "object",
              "properties": {
                "mcc": {
                  "type": "string"
                },
                "mnc": {
                  "type": "string"
                }
              }
            },
            "startTime": {
              "type": "string",
              "format": "dateTime"
            },
            "endTime": {
              "type": "string",
              "format": "dateTime"
            },
            "ipAddress": {
              "type": "string"
            },
            "imei": {
              "type": "string"
            },
            "bytes": {
              "type": "number"
            },
            "roundedBytes": {
              "type": "number"
            }
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "suspended",
            "preactive"
          ]
        },
        "ownership": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "ownerAccountId": {
          "type": "string"
        },
        "ownerAccountName": {
          "type": "string"
        },
        "iccid": {
          "type": "string"
        },
        "fixedIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "carriers": {
          "type": "object",
          "properties": {
            "UKJ": {
              "type": "boolean"
            },
            "UKAT": {
              "type": "boolean"
            },
            "UKRO": {
              "type": "boolean"
            },
            "UKTM": {
              "type": "boolean"
            },
            "UKA": {
              "type": "boolean"
            },
            "UKK": {
              "type": "boolean"
            },
            "UKMX": {
              "type": "boolean"
            },
            "UKJBB": {
              "type": "boolean"
            },
            "UKP": {
              "type": "boolean"
            },
            "UKX": {
              "type": "boolean"
            },
            "ROCT": {
              "type": "boolean"
            },
            "NAQM": {
              "type": "boolean"
            },
            "NAVZ": {
              "type": "boolean"
            },
            "ROPD": {
              "type": "boolean"
            },
            "NAMP": {
              "type": "boolean"
            },
            "EXPTMOB": {
              "type": "boolean"
            },
            "EXPBICS": {
              "type": "boolean"
            },
            "ROMK": {
              "type": "boolean"
            },
            "ROMT": {
              "type": "boolean"
            },
            "ROTL": {
              "type": "boolean"
            },
            "ROTN": {
              "type": "boolean"
            },
            "NAMR": {
              "type": "boolean"
            },
            "NATM": {
              "type": "boolean"
            },
            "NAMB": {
              "type": "boolean"
            },
            "NAC3": {
              "type": "boolean"
            },
            "ROAS": {
              "type": "boolean"
            },
            "ROWT": {
              "type": "boolean"
            },
            "NAEX": {
              "type": "boolean"
            },
            "ROPT": {
              "type": "boolean"
            },
            "ROPU": {
              "type": "boolean"
            },
            "ROPI": {
              "type": "boolean"
            },
            "ROPE": {
              "type": "boolean"
            },
            "TEST": {
              "type": "boolean"
            }
          }
        },
        "limit": {
          "type": "number"
        },
        "subscriptions": {
          "type": "object",
          "properties": {
            "bundles": {
              "type": "array",
              "items": {
                "properties": {
                  "dfProducts": {
                    "type": "object",
                    "properties": {
                      "DataPoolProduct": {
                        "type": "string"
                      },
                      "PerMbProduct": {
                        "type": "string"
                      }
                    }
                  },
                  "bundleId": {
                    "type": "string"
                  },
                  "localProductId": {
                    "type": "string"
                  },
                  "localProductName": {
                    "type": "string"
                  },
                  "sharedDataPoolId": {
                    "type": "string"
                  },
                  "initialSize": {
                    "type": "number"
                  },
                  "remainingBytes": {
                    "type": "number"
                  },
                  "preactivationInitialBytes": {
                    "type": "number"
                  },
                  "preactivationRemainingBytes": {
                    "type": "number"
                  },
                  "preactivationInitialSms": {
                    "type": "number"
                  },
                  "preactivationRemainingSms": {
                    "type": "number"
                  },
                  "preactivationInitialVoice": {
                    "type": "number"
                  },
                  "preactivationRemainingVoice": {
                    "type": "number"
                  },
                  "dataUsed": {
                    "type": "number"
                  },
                  "startTime": {
                    "type": "string",
                    "format": "dateTime"
                  },
                  "endTime": {
                    "type": "string",
                    "format": "dateTime"
                  },
                  "cost": {
                    "type": "number"
                  },
                  "remainingCredit": {
                    "type": "number"
                  },
                  "creditUsed": {
                    "type": "number"
                  },
                  "perMbCost": {
                    "type": "number"
                  },
                  "type": {
                    "type": "string"
                  },
                  "smsInitialSize": {
                    "type": "number"
                  },
                  "remainingSms": {
                    "type": "number"
                  },
                  "proratedSms": {
                    "type": "number"
                  },
                  "smsUsed": {
                    "type": "number"
                  },
                  "smsCreditUsed": {
                    "type": "number"
                  },
                  "smsCost": {
                    "type": "number"
                  }
                }
              }
            },
            "id": {
              "type": "string"
            },
            "accountId": {
              "type": "string"
            },
            "limit": {
              "type": "number"
            },
            "smsLimit": {
              "type": "number"
            }
          }
        },
        "setups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string"
              },
              "assetName": {
                "type": "string"
              },
              "alerts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "notification": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "smsAlerts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "notification": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": "string",
                    "value": "string"
                  }
                }
              }
            }
          }
        },
        "msisdn": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "profileState": {
          "type": "string",
          "enum": [
            "onstock",
            "disabled",
            "enabled",
            "created"
          ]
        },
        "bootstrapEid": {
          "type": "string"
        },
        "activationDate": {
          "type": "string",
          "format": "dateTime"
        },
        "reactivationDate": {
          "type": "string",
          "format": "dateTime"
        },
        "subscriptionDate": {
          "type": "string",
          "format": "dateTime"
        },
        "suspensionDate": {
          "type": "string",
          "format": "dateTime"
        },
        "smsLimit": {
          "type": "number"
        },
        "lastSMS": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "endTime": {
              "type": "string",
              "format": "dateTime"
            },
            "originatingAddress": {
              "type": "string"
            },
            "destinationAddress": {
              "type": "string"
            },
            "servingNetwork": {
              "type": "object",
              "properties": {
                "mcc": {
                  "type": "string"
                },
                "mnc": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "Billing": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "dateFrom": {
          "type": "string",
          "format": "dateTime"
        },
        "dateTo": {
          "type": "string",
          "format": "dateTime"
        },
        "Currency": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "billing": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "bundle": {
                "type": "object",
                "properties": {
                  "promotionName": {
                    "type": "string"
                  },
                  "cost": {
                    "type": "number"
                  },
                  "bytes": {
                    "type": "number"
                  },
                  "overuse": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  }
                }
              },
              "numberOfSims": {
                "type": "number"
              },
              "numberOfSimsActive": {
                "type": "number"
              },
              "lineRental": {
                "type": "number"
              },
              "prorataLineRentalLastCycle": {
                "type": "number"
              },
              "totalBytesIncluded": {
                "type": "number"
              },
              "bytesConsumed": {
                "type": "number"
              },
              "overuseBytes": {
                "type": "number"
              },
              "overuseCost": {
                "type": "number"
              },
              "totalCost": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "Events": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "iccid": {
          "type": "string"
        },
        "eid": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "raw": {
          "type": "object"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "modified": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "eSIM": {
      "type": "object",
      "required": [
        "eid"
      ],
      "properties": {
        "eid": {
          "type": "string",
          "description": "Unique identifier of the eSIM"
        },
        "ownership": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerAccountId": {
          "type": "string"
        },
        "ownerAccountName": {
          "type": "string"
        },
        "callbackStatus": {
          "type": "number",
          "description": "Indicates the Unix timestamp when current operation expires. 0 for no current operation",
          "default": 0
        },
        "profiles": {
          "type": "array",
          "description": "Significants properties of installed profiles",
          "items": {
            "type": "object",
            "properties": {
              "iccid": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive",
                  "suspended",
                  "preactive"
                ]
              },
              "profileState": {
                "type": "string",
                "enum": [
                  "onstock",
                  "disabled",
                  "enabled",
                  "created"
                ]
              },
              "enabled": {
                "type": "boolean"
              },
              "bootstrap": {
                "type": "boolean"
              }
            }
          }
        },
        "setups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "accountId": {
                "type": "string"
              },
              "eSimName": {
                "type": "string"
              },
              "eSimGroupName": {
                "type": "string"
              }
            }
          }
        },
        "enabledProfile": {
          "$ref": "#/definitions/AssetSimcard"
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "name",
        "accountId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resellerProductId": {
          "type": "string"
        },
        "networks": {
          "type": "object",
          "properties": {
            "imsisType": {
              "type": "string",
              "enum": [
                "singleimsis",
                "multiimsis"
              ]
            },
            "singleimsis": {
              "type": "string"
            },
            "multiimsis": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "currency": {
          "type": "string",
          "enum": [
            "USD",
            "EUR",
            "GBP",
            "MXN",
            "HKD",
            "CNY",
            "MYR",
            "AUD"
          ]
        },
        "cycle": {
          "type": "number"
        },
        "cycleUnits": {
          "type": "String",
          "enum": [
            "hour",
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "renewOnExpiry": {
          "type": "boolean"
        },
        "renewOnDepletion": {
          "type": "boolean"
        },
        "contractLength": {
          "type": "number"
        },
        "allowOveruse": {
          "type": "boolean"
        },
        "productType": {
          "type": "string",
          "enum": [
            "PerMb",
            "Aggregate",
            "Single",
            "SharedDataPool"
          ]
        },
        "productTypeScheme": {
          "type": "object",
          "properties": {
            "PerMb": {
              "type": "object",
              "properties": {
                "lineRental": {
                  "type": "boolean"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                },
                "equallyZone": {
                  "type": "boolean"
                }
              }
            },
            "Aggregate": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                }
              }
            },
            "Single": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                }
              }
            },
            "SharedDataPool": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                },
                "sharedDataPoolCost": {
                  "type": "number"
                }
              }
            },
            "DataPool": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                }
              }
            }
          }
        },
        "services": {
          "type": "object",
          "properties": {
            "sms": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "bundleIncludeQuantity": {
                  "type": "number"
                },
                "bundlePriceOveruse": {
                  "type": "number"
                }
              }
            },
            "voice": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "bundleIncludeQuantity": {
                  "type": "number"
                },
                "bundlePriceOveruse": {
                  "type": "number"
                }
              }
            }
          }
        },
        "preactivation": {
          "type": "object",
          "properties": {
            "active": {
              "type": "boolean"
            },
            "data": {
              "type": "number"
            },
            "sms": {
              "type": "number"
            },
            "voice": {
              "type": "number"
            }
          }
        },
        "carriers": {
          "type": "object",
          "properties": {
            "UKJ": {
              "type": "boolean"
            },
            "UKAT": {
              "type": "boolean"
            },
            "UKRO": {
              "type": "boolean"
            },
            "UKTM": {
              "type": "boolean"
            },
            "UKA": {
              "type": "boolean"
            },
            "UKK": {
              "type": "boolean"
            },
            "UKMX": {
              "type": "boolean"
            },
            "UKJBB": {
              "type": "boolean"
            },
            "UKP": {
              "type": "boolean"
            },
            "UKX": {
              "type": "boolean"
            },
            "ROCT": {
              "type": "boolean"
            },
            "NAQM": {
              "type": "boolean"
            },
            "NAVZ": {
              "type": "boolean"
            },
            "ROPD": {
              "type": "boolean"
            },
            "NAMP": {
              "type": "boolean"
            },
            "EXPTMOB": {
              "type": "boolean"
            },
            "EXPBICS": {
              "type": "boolean"
            },
            "ROMK": {
              "type": "boolean"
            },
            "ROMT": {
              "type": "boolean"
            },
            "ROTL": {
              "type": "boolean"
            },
            "ROTN": {
              "type": "boolean"
            },
            "NAMR": {
              "type": "boolean"
            },
            "NATM": {
              "type": "boolean"
            },
            "NAMB": {
              "type": "boolean"
            },
            "NAC3": {
              "type": "boolean"
            },
            "NAEX": {
              "type": "boolean"
            },
            "ROPT": {
              "type": "boolean"
            },
            "ROPU": {
              "type": "boolean"
            },
            "ROPI": {
              "type": "boolean"
            },
            "ROPE": {
              "type": "boolean"
            },
            "TEST": {
              "type": "boolean"
            }
          }
        },
        "bundleId": {
          "type": "string"
        },
        "productZoneSetup": {
          "type": "object",
          "properties": {
            "schemeId": {
              "type": "string"
            },
            "zones": {
              "type": "array",
              "items": {
                "properties": {
                  "zoneId": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "cost": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ProductNoBundleId": {
      "type": "object",
      "required": [
        "name",
        "accountId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "accountIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resellerProductId": {
          "type": "string"
        },
        "networks": {
          "type": "object",
          "properties": {
            "imsisType": {
              "type": "string",
              "enum": [
                "singleimsis",
                "multiimsis"
              ]
            },
            "singleimsis": {
              "type": "string"
            },
            "multiimsis": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "currency": {
          "type": "string",
          "enum": [
            "USD",
            "EUR",
            "GBP",
            "MXN",
            "HKD",
            "CNY",
            "MYR",
            "AUD"
          ]
        },
        "cycle": {
          "type": "number"
        },
        "cycleUnits": {
          "type": "String",
          "enum": [
            "hour",
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "renewOnExpiry": {
          "type": "boolean"
        },
        "renewOnDepletion": {
          "type": "boolean"
        },
        "contractLength": {
          "type": "number"
        },
        "allowOveruse": {
          "type": "boolean"
        },
        "productType": {
          "type": "string",
          "enum": [
            "PerMb",
            "Aggregate",
            "Single",
            "SharedDataPool"
          ]
        },
        "productTypeScheme": {
          "type": "object",
          "properties": {
            "PerMb": {
              "type": "object",
              "properties": {
                "lineRental": {
                  "type": "boolean"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                },
                "equallyZone": {
                  "type": "boolean"
                }
              }
            },
            "Aggregate": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                }
              }
            },
            "Single": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                }
              }
            },
            "SharedDataPool": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                },
                "perMbCost": {
                  "type": "number"
                },
                "sharedDataPoolCost": {
                  "type": "number"
                }
              }
            },
            "DataPool": {
              "type": "object",
              "properties": {
                "initialSize": {
                  "type": "number"
                },
                "lineRentalCost": {
                  "type": "number"
                }
              }
            }
          }
        },
        "services": {
          "type": "object",
          "properties": {
            "sms": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "bundleIncludeQuantity": {
                  "type": "number"
                },
                "bundlePriceOveruse": {
                  "type": "number"
                }
              }
            },
            "voice": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                },
                "bundleIncludeQuantity": {
                  "type": "number"
                },
                "bundlePriceOveruse": {
                  "type": "number"
                }
              }
            }
          }
        },
        "carriers": {
          "type": "object",
          "properties": {
            "UKJ": {
              "type": "boolean"
            },
            "UKAT": {
              "type": "boolean"
            },
            "UKRO": {
              "type": "boolean"
            },
            "UKTM": {
              "type": "boolean"
            },
            "UKA": {
              "type": "boolean"
            },
            "UKK": {
              "type": "boolean"
            },
            "UKMX": {
              "type": "boolean"
            },
            "UKJBB": {
              "type": "boolean"
            },
            "UKP": {
              "type": "boolean"
            },
            "UKX": {
              "type": "boolean"
            },
            "ROCT": {
              "type": "boolean"
            },
            "NAQM": {
              "type": "boolean"
            },
            "NAVZ": {
              "type": "boolean"
            },
            "ROPD": {
              "type": "boolean"
            },
            "NAMP": {
              "type": "boolean"
            },
            "EXPTMOB": {
              "type": "boolean"
            },
            "EXPBICS": {
              "type": "boolean"
            },
            "ROMK": {
              "type": "boolean"
            },
            "ROMT": {
              "type": "boolean"
            },
            "ROTL": {
              "type": "boolean"
            },
            "ROTN": {
              "type": "boolean"
            },
            "NAMR": {
              "type": "boolean"
            },
            "NATM": {
              "type": "boolean"
            },
            "NAMB": {
              "type": "boolean"
            },
            "NAC3": {
              "type": "boolean"
            },
            "NAEX": {
              "type": "boolean"
            },
            "ROPT": {
              "type": "boolean"
            },
            "ROPU": {
              "type": "boolean"
            },
            "ROPI": {
              "type": "boolean"
            },
            "ROPE": {
              "type": "boolean"
            },
            "TEST": {
              "type": "boolean"
            }
          }
        },
        "productZoneSetup": {
          "type": "object",
          "properties": {
            "schemeId": {
              "type": "string"
            },
            "zones": {
              "type": "array",
              "items": {
                "properties": {
                  "zoneId": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "cost": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "statusComponent": {
      "type": "object",
      "required": [
        "name",
        "status",
        "tags",
        "created",
        "modified"
      ],
      "properties": {
        "id": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "statusName": {
          "type": "string",
          "enum": [
            "Operational",
            "Performance Issues",
            "Partial Outage",
            "Major Outage"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "type": "string"
        },
        "modified": {
          "type": "string"
        }
      }
    },
    "steeringList": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        },
        "value": {
          "type": "string",
          "required": true
        }
      }
    },
    "campaignItem": {
      "type": "object",
      "properties": {
        "iccid": {
          "type": "string",
          "description": "Identifier of the subscriber",
          "required": true
        },
        "campaignId": {
          "type": "string",
          "description": "Identifier of the parent campaign",
          "required": true
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "success",
            "error"
          ]
        },
        "attempts": {
          "type": "number"
        },
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "detail": {
              "type": "string"
            }
          }
        }
      }
    },
    "campaingDownloadProfile": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "retry": {
          "type": "boolean"
        },
        "expirationTime": {
          "type": "number"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "eid": {
                "type": "string",
                "required": true
              },
              "iccid": {
                "type": "string",
                "required": true
              }
            }
          }
        }
      }
    },
    "campaingDeleteProfile": {
      "type": "object",
      "properties": {
        "deleteMode": {
          "type": "string",
          "enum": [
            "enabled_profile",
            "last_disabled_profile",
            "all_disabled_profiles"
          ]
        }
      }
    },
    "campaign": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier of the campaign"
        },
        "accountId": {
          "type": "string",
          "required": true
        },
        "userId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "steering",
            "download_profile",
            "disable_profile",
            "delete_profile",
            "audit_esim"
          ],
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "scheduled",
            "running",
            "completed",
            "expired",
            "discarded"
          ]
        },
        "scheduled": {
          "type": "string",
          "format": "dateTime"
        },
        "startTime": {
          "type": "string",
          "format": "dateTime"
        },
        "endTime": {
          "type": "string",
          "format": "dateTime"
        },
        "filters": {
          "type": "object",
          "required": true
        },
        "campaignReferences": {
          "type": "object"
        },
        "process": {
          "type": "object",
          "properties": {
            "total": {
              "type": "number"
            },
            "pending": {
              "type": "number"
            },
            "success": {
              "type": "number"
            },
            "error": {
              "type": "number"
            }
          }
        },
        "steeringList": {
          "type": "string"
        },
        "downloadProfile": {
          "$ref": "#/definitions/campaingDownloadProfile"
        },
        "deleteProfile": {
          "$ref": "#/definitions/campaingDeleteProfile"
        }
      }
    },
    "Bulk": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "count": {
          "type": "number"
        },
        "modified": {
          "type": "string",
          "format": "dateTime"
        },
        "created": {
          "type": "string",
          "format": "dateTime"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "BadRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "BadRequest"
        },
        "message": {
          "type": "string",
          "default": "There was a problem with your data, please try again."
        }
      }
    },
    "Forbidden": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "Forbidden"
        },
        "message": {
          "type": "string",
          "default": "There was a problem with your data, please try again."
        }
      }
    },
    "Unauthorized": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "Unauthorized"
        },
        "message": {
          "type": "string",
          "default": "There is a permissions problem. Please try again. Contact your site administrator if the problem persist."
        }
      }
    },
    "PaymentRequired": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "PaymentRequired"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Internal": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "Internal"
        },
        "message": {
          "type": "string",
          "default": "There was an unexpected error. Please try again. Contact your site administrator if the problem persist."
        }
      }
    },
    "NotFound": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "default": "NotFound"
        },
        "message": {
          "type": "string",
          "default": "string"
        }
      }
    }
  },
  "responses": {
  },
  "parameters": {
  }
}